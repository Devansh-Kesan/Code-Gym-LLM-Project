title: Code Gym
description: A platform for practicing programming skills through structured exercises
version: 1.0.0
maintainer: your-email@example.com
languages:
  - id: python
    name: Python
    version: '3.12'
  - id: javascript
    name: JavaScript
    version: ES2022
courses:
  - id: python-course
    language: python
    title: Python Fundamentals
    description: Learn Python programming from scratch
    difficulty: beginner
    estimated_hours: 20
    prerequisites: []
    topics:
      - topic_id: python_basics
        topic_title: Python Basics & Control Flow
        short_description: >-
          Learn the foundation of Python including variables, loops,
          conditionals, and basic logic building.
        order: 1
        questions:
          - id: even-or-odd
            title: 'Even or Odd'
            description: Determine if the input number is even or odd.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def is_even_or_odd(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    num = int(input())
                    print(is_even_or_odd(num))
            test_cases:
              hidden: false
              visible_cases:
                - input: '4'
                  expected_output: 'Even'
                  explanation: '4 is divisible by 2'
                - input: '7'
                  expected_output: 'Odd'
                  explanation: '7 is not divisible by 2'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: 'Even'
                - input: '101'
                  expected_output: 'Odd'
            solution:
              content: |2-
                def is_even_or_odd(n):
                    return "Even" if n % 2 == 0 else "Odd"

                if __name__ == "__main__":
                    num = int(input())
                    print(is_even_or_odd(num))

          - id: sum-upto-n
            title: 'Sum up to N'
            description: Calculate the sum of numbers from 1 to N.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def sum_upto_n(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(sum_upto_n(n))
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '15'
                  explanation: '1 + 2 + 3 + 4 + 5 = 15'
                - input: '1'
                  expected_output: '1'
                  explanation: 'Sum of first 1 number is 1'
              hidden: true
              hidden_cases:
                - input: '100'
                  expected_output: '5050'
            solution:
              content: |2-
                def sum_upto_n(n):
                    return n * (n + 1) // 2

                if __name__ == "__main__":
                    n = int(input())
                    print(sum_upto_n(n))

          - id: fizz-buzz
            title: 'FizzBuzz'
            description: Print Fizz if divisible by 3, Buzz if divisible by 5, FizzBuzz if both.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def fizz_buzz(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(fizz_buzz(n))
            test_cases:
              hidden: false
              visible_cases:
                - input: '3'
                  expected_output: 'Fizz'
                  explanation: 'Divisible by 3'
                - input: '5'
                  expected_output: 'Buzz'
                  explanation: 'Divisible by 5'
              hidden: true
              hidden_cases:
                - input: '15'
                  expected_output: 'FizzBuzz'
                - input: '2'
                  expected_output: '2'
            solution:
              content: |2-
                def fizz_buzz(n):
                    if n % 3 == 0 and n % 5 == 0:
                        return "FizzBuzz"
                    elif n % 3 == 0:
                        return "Fizz"
                    elif n % 5 == 0:
                        return "Buzz"
                    else:
                        return str(n)

                if __name__ == "__main__":
                    n = int(input())
                    print(fizz_buzz(n))

          - id: multiplication-table
            title: 'Multiplication Table'
            description: Print the multiplication table for a number up to 10.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def print_table(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print_table(n)
            test_cases:
              hidden: false
              visible_cases:
                - input: '2'
                  expected_output: "2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20"
                  explanation: 'Multiplication table from 1 to 10'
              hidden: true
              hidden_cases:
                - input: '10'
                  expected_output: "10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100"
            solution:
              content: |2-
                def print_table(n):
                    for i in range(1, 11):
                        print(f"{n} x {i} = {n * i}")

                if __name__ == "__main__":
                    n = int(input())
                    print_table(n)

          - id: palindrome-check
            title: 'Palindrome Check'
            description: Check whether the given string is a palindrome (reads the same backward and forward).
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def is_palindrome(s):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    s = input()
                    print(is_palindrome(s))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'racecar'
                  expected_output: 'True'
                  explanation: 'racecar is the same forwards and backwards'
                - input: 'hello'
                  expected_output: 'False'
                  explanation: 'hello reversed is olleh'
              hidden: true
              hidden_cases:
                - input: 'madam'
                  expected_output: 'True'
                - input: 'python'
                  expected_output: 'False'
            solution:
              content: |2-
                def is_palindrome(s):
                    return str(s) == str(s)[::-1]

                if __name__ == "__main__":
                    s = input()
                    print(is_palindrome(s))

          - id: pattern-printer
            title: 'Pattern Printer'
            description: Print a right-angled triangle of stars of height N.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def print_pattern(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print_pattern(n)
            test_cases:
              hidden: false
              visible_cases:
                - input: '3'
                  expected_output: "*\n**\n***"
                  explanation: 'Each line has increasing stars'
              hidden: true
              hidden_cases:
                - input: '5'
                  expected_output: "*\n**\n***\n****\n*****"
            solution:
              content: |2-
                def print_pattern(n):
                    for i in range(1, n + 1):
                        print('*' * i)

                if __name__ == "__main__":
                    n = int(input())
                    print_pattern(n)
                              
      - topic_id: data_structures
        topic_title: Data Structures
        short_description: Work with lists, dictionaries, sets, and tuples to manipulate and organize data efficiently.
        order: 2
        questions:
          - id: reverse-list
            title: 'Reverse List'
            description: Reverse a list of integers without using built-in reverse methods.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def reverse_list(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(reverse_list(lst))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5'
                  expected_output: '[5, 4, 3, 2, 1]'
                - input: '10'
                  expected_output: '[10]'
              hidden: true
              hidden_cases:
                - input: '7 8 9'
                  expected_output: '[9, 8, 7]'
            solution:
              content: |2-
                def reverse_list(lst):
                    return lst[::-1]

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(reverse_list(lst))

          - id: unique-elements
            title: 'Unique Elements'
            description: Return a list of only the unique elements from the input list.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def unique_elements(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst = input().split()
                    print(unique_elements(lst))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'a b c a b'
                  expected_output: "['a', 'b', 'c']"
                - input: '1 2 2 3 4'
                  expected_output: "['1', '2', '3', '4']"
              hidden: true
              hidden_cases:
                - input: 'x y x z'
                  expected_output: "['x', 'y', 'z']"
            solution:
              content: |2-
                def unique_elements(lst):
                    return list(dict.fromkeys(lst))

                if __name__ == "__main__":
                    lst = input().split()
                    print(unique_elements(lst))

          - id: dict-counter
            title: 'Dictionary Word Counter'
            description: Count occurrences of each word in a sentence and return a dictionary.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def count_words(sentence):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    sentence = input()
                    print(count_words(sentence))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'apple banana apple'
                  expected_output: "{'apple': 2, 'banana': 1}"
                - input: 'one one two'
                  expected_output: "{'one': 2, 'two': 1}"
              hidden: true
              hidden_cases:
                - input: 'cat dog cat dog dog'
                  expected_output: "{'cat': 2, 'dog': 3}"
            solution:
              content: |2-
                def count_words(sentence):
                    words = sentence.split()
                    result = {}
                    for word in words:
                        result[word] = result.get(word, 0) + 1
                    return result

                if __name__ == "__main__":
                    sentence = input()
                    print(count_words(sentence))

          - id: merge-dictionaries
            title: 'Merge Dictionaries'
            description: Merge two dictionaries, summing values for matching keys.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def merge_dicts(d1, d2):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    d1 = eval(input())
                    d2 = eval(input())
                    print(merge_dicts(d1, d2))
            test_cases:
              hidden: false
              visible_cases:
                - input: "{'a': 1, 'b': 2}\n{'b': 3, 'c': 4}"
                  expected_output: "{'a': 1, 'b': 5, 'c': 4}"
                - input: "{}\n{'x': 10}"
                  expected_output: "{'x': 10}"
              hidden: true
              hidden_cases:
                - input: "{'x': 1, 'y': 2}\n{'x': 4, 'z': 5}"
                  expected_output: "{'x': 5, 'y': 2, 'z': 5}"
            solution:
              content: |2-
                def merge_dicts(d1, d2):
                    result = d1.copy()
                    for k, v in d2.items():
                        result[k] = result.get(k, 0) + v
                    return result

                if __name__ == "__main__":
                    d1 = eval(input())
                    d2 = eval(input())
                    print(merge_dicts(d1, d2))

          - id: stack-simulation
            title: 'Stack Simulation'
            description: Implement basic stack operations (push, pop) using a list.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Stack:
                    def __init__(self):
                        self.items = []

                    def push(self, value):
                        # Your code here
                        pass

                    def pop(self):
                        # Your code here
                        pass

                    def display(self):
                        return self.items

                if __name__ == "__main__":
                    s = Stack()
                    s.push(1)
                    s.push(2)
                    s.pop()
                    print(s.display())
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '[1]'
                - input: ''
                  expected_output: '[1]'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '[1, 2]'
            solution:
              content: |2-
                class Stack:
                    def __init__(self):
                        self.items = []

                    def push(self, value):
                        self.items.append(value)

                    def pop(self):
                        if self.items:
                            self.items.pop()

                    def display(self):
                        return self.items

                if __name__ == "__main__":
                    s = Stack()
                    s.push(1)
                    s.push(2)
                    s.pop()
                    print(s.display())

          - id: most-common-element
            title: 'Most Common Element'
            description: Return the most frequent element in a list. If tie, return any one.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def most_common(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst = input().split()
                    print(most_common(lst))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'a b a c a'
                  expected_output: 'a'
                - input: 'x y x z x y'
                  expected_output: 'x'
              hidden: true
              hidden_cases:
                - input: '1 2 3 3 2 2'
                  expected_output: '2'
            solution:
              content: |2-
                def most_common(lst):
                    freq = {}
                    for item in lst:
                        freq[item] = freq.get(item, 0) + 1
                    return max(freq, key=freq.get)

                if __name__ == "__main__":
                    lst = input().split()
                    print(most_common(lst))
      
      - topic_id: functions_recursion
        topic_title: Functions and Recursion
        short_description: Understand how to build reusable code with functions and tackle problems using recursion.
        order: 3
        questions:
        - id: square-number
          title: 'Square a Number'
          description: Write a function that returns the square of a number.
          complexity: easy
          points: 5
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def square(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  num = int(input())
                  print(square(num))
          test_cases:
            hidden: false
            visible_cases:
              - input: '4'
                expected_output: '16'
              - input: '-3'
                expected_output: '9'
            hidden: true
            hidden_cases:
              - input: '0'
                expected_output: '0'
          solution:
            content: |2-
              def square(n):
                  return n * n

              if __name__ == "__main__":
                  num = int(input())
                  print(square(num))

        - id: greet-name
          title: 'Greet by Name'
          description: Write a function that takes a name and returns a greeting message.
          complexity: easy
          points: 5
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def greet(name):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  name = input()
                  print(greet(name))
          test_cases:
            hidden: false
            visible_cases:
              - input: 'Alice'
                expected_output: 'Hello, Alice!'
              - input: 'Bob'
                expected_output: 'Hello, Bob!'
            hidden: true
            hidden_cases:
              - input: 'Zoe'
                expected_output: 'Hello, Zoe!'
          solution:
            content: |2-
              def greet(name):
                  return f"Hello, {name}!"

              if __name__ == "__main__":
                  name = input()
                  print(greet(name))

        - id: factorial-recursion
          title: 'Factorial (Recursion)'
          description: Use recursion to calculate the factorial of a number.
          complexity: medium
          points: 10
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def factorial(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  num = int(input())
                  print(factorial(num))
          test_cases:
            hidden: false
            visible_cases:
              - input: '5'
                expected_output: '120'
              - input: '0'
                expected_output: '1'
            hidden: true
            hidden_cases:
              - input: '6'
                expected_output: '720'
          solution:
            content: |2-
              def factorial(n):
                  if n == 0 or n == 1:
                      return 1
                  return n * factorial(n - 1)

              if __name__ == "__main__":
                  num = int(input())
                  print(factorial(num))

        - id: fibonacci-recursion
          title: 'Fibonacci (Recursion)'
          description: Return the nth Fibonacci number using recursion.
          complexity: medium
          points: 10
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def fibonacci(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  num = int(input())
                  print(fibonacci(num))
          test_cases:
            hidden: false
            visible_cases:
              - input: '0'
                expected_output: '0'
              - input: '1'
                expected_output: '1'
            hidden: true
            hidden_cases:
              - input: '5'
                expected_output: '5'
          solution:
            content: |2-
              def fibonacci(n):
                  if n <= 1:
                      return n
                  return fibonacci(n - 1) + fibonacci(n - 2)

              if __name__ == "__main__":
                  num = int(input())
                  print(fibonacci(num))

        - id: power-function
          title: 'Power Function (Recursion)'
          description: Calculate a raised to the power of b using recursion.
          complexity: hard
          points: 15
          time_limit_seconds: 10
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def power(a, b):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  base, exponent = map(int, input().split())
                  print(power(base, exponent))
          test_cases:
            hidden: false
            visible_cases:
              - input: '2 3'
                expected_output: '8'
              - input: '5 0'
                expected_output: '1'
            hidden: true
            hidden_cases:
              - input: '3 4'
                expected_output: '81'
          solution:
            content: |2-
              def power(a, b):
                  if b == 0:
                      return 1
                  return a * power(a, b - 1)

              if __name__ == "__main__":
                  base, exponent = map(int, input().split())
                  print(power(base, exponent))

        - id: sum-of-digits
          title: 'Sum of Digits (Recursion)'
          description: Write a recursive function to return the sum of digits of an integer.
          complexity: hard
          points: 15
          time_limit_seconds: 10
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def sum_of_digits(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  number = int(input())
                  print(sum_of_digits(number))
          test_cases:
            hidden: false
            visible_cases:
              - input: '123'
                expected_output: '6'
              - input: '0'
                expected_output: '0'
            hidden: true
            hidden_cases:
              - input: '999'
                expected_output: '27'
          solution:
            content: |2-
              def sum_of_digits(n):
                  if n == 0:
                      return 0
                  return n % 10 + sum_of_digits(n // 10)

              if __name__ == "__main__":
                  number = int(input())
                  print(sum_of_digits(number))
  
      - topic_id: oop
        topic_title: Object-Oriented Programming (OOP)
        short_description: Learn to structure Python code with classes, objects, and inheritance to build modular programs.
        order: 4
        questions:
          - id: basic-class
            title: 'Basic Class Creation'
            description: Create a class `Person` with attributes `name` and `age`, and a method to print them.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Person:
                    # Your code here
                    pass

                if __name__ == "__main__":
                    p = Person("Alice", 30)
                    p.display()
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'Name: Alice, Age: 30'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: 'Name: Bob, Age: 25'
            solution:
              content: |2-
                class Person:
                    def __init__(self, name, age):
                        self.name = name
                        self.age = age

                    def display(self):
                        print(f"Name: {self.name}, Age: {self.age}")

                if __name__ == "__main__":
                    p = Person("Alice", 30)
                    p.display()

          - id: class-methods
            title: 'Class with Methods'
            description: Create a class `Rectangle` with methods to calculate area and perimeter.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Rectangle:
                    # Your code here
                    pass

                if __name__ == "__main__":
                    r = Rectangle(5, 10)
                    print(r.area())
                    print(r.perimeter())
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: "50\n30"
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: "6\n10"
            solution:
              content: |2-
                class Rectangle:
                    def __init__(self, width, height):
                        self.width = width
                        self.height = height

                    def area(self):
                        return self.width * self.height

                    def perimeter(self):
                        return 2 * (self.width + self.height)

                if __name__ == "__main__":
                    r = Rectangle(5, 10)
                    print(r.area())
                    print(r.perimeter())

          - id: inheritance-example
            title: 'Inheritance Example'
            description: Use inheritance to create a class `Student` that inherits from `Person`.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Person:
                    def __init__(self, name):
                        self.name = name

                class Student(Person):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    s = Student("John", "Math")
                    s.display()
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'John studies Math'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: 'Alice studies History'
            solution:
              content: |2-
                class Person:
                    def __init__(self, name):
                        self.name = name

                class Student(Person):
                    def __init__(self, name, subject):
                        super().__init__(name)
                        self.subject = subject

                    def display(self):
                        print(f"{self.name} studies {self.subject}")

                if __name__ == "__main__":
                    s = Student("John", "Math")
                    s.display()

          - id: class-attributes
            title: 'Class Attributes and Instances'
            description: Count how many instances of a class have been created using a class attribute.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Counter:
                    count = 0

                    def __init__(self):
                        # Your code here
                        pass

                if __name__ == "__main__":
                    a = Counter()
                    b = Counter()
                    print(Counter.count)
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '2'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '5'
            solution:
              content: |2-
                class Counter:
                    count = 0

                    def __init__(self):
                        Counter.count += 1

                if __name__ == "__main__":
                    a = Counter()
                    b = Counter()
                    print(Counter.count)

          - id: private-attributes
            title: 'Private Attributes and Encapsulation'
            description: Use private variables and a getter method to access data safely.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class BankAccount:
                    def __init__(self, balance):
                        # Your code here
                        pass

                if __name__ == "__main__":
                    acc = BankAccount(1000)
                    print(acc.get_balance())
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '1000'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '2500'
            solution:
              content: |2-
                class BankAccount:
                    def __init__(self, balance):
                        self.__balance = balance

                    def get_balance(self):
                        return self.__balance

                if __name__ == "__main__":
                    acc = BankAccount(1000)
                    print(acc.get_balance())

          - id: polymorphism-example
            title: 'Polymorphism Example'
            description: Demonstrate polymorphism using a common method in multiple classes.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Dog:
                    def speak(self):
                        return "Woof!"

                class Cat:
                    # Your code here
                    pass

                def animal_sound(animal):
                    return animal.speak()

                if __name__ == "__main__":
                    c = Cat()
                    print(animal_sound(c))
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'Meow!'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: 'Meow!'
            solution:
              content: |2-
                class Dog:
                    def speak(self):
                        return "Woof!"

                class Cat:
                    def speak(self):
                        return "Meow!"

                def animal_sound(animal):
                    return animal.speak()

                if __name__ == "__main__":
                    c = Cat()
                    print(animal_sound(c))

      - topic_id: algorithms
        topic_title: Algorithms & Problem Solving
        short_description: Solve classic algorithmic challenges to boost logical thinking and coding fluency.
        order: 5
        questions:
          - id: power-of-two
            title: 'Is Power of Two?'
            description: Check whether a given number is a power of two.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def is_power_of_two(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(is_power_of_two(n))
            test_cases:
              hidden: false
              visible_cases:
                - input: '8'
                  expected_output: 'True'
                - input: '10'
                  expected_output: 'False'
              hidden: true
              hidden_cases:
                - input: '1'
                  expected_output: 'True'
            solution:
              content: |2-
                def is_power_of_two(n):
                    return n > 0 and (n & (n - 1)) == 0

                if __name__ == "__main__":
                    n = int(input())
                    print(is_power_of_two(n))

          - id: count-words
            title: 'Count Words in a Sentence'
            description: Count the number of words in a given sentence. Words are separated by spaces.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def count_words(sentence):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    sentence = input()
                    print(count_words(sentence))
            test_cases:
              hidden: false
              visible_cases:
                - input: "This is a test"
                  expected_output: '4'
                - input: "Python is fun"
                  expected_output: '3'
              hidden: true
              hidden_cases:
                - input: "  Hello world   "
                  expected_output: '2'
            solution:
              content: |2-
                def count_words(sentence):
                    return len(sentence.strip().split())

                if __name__ == "__main__":
                    sentence = input()
                    print(count_words(sentence))

          - id: group-by-frequency
            title: 'Group Elements by Frequency'
            description: Given a list of numbers, group and return elements by their frequency in descending order.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def group_by_frequency(arr):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    arr = list(map(int, input().split()))
                    print(group_by_frequency(arr))
            test_cases:
              hidden: false
              visible_cases:
                - input: '4 5 6 5 4 3'
                  expected_output: '[4, 4, 5, 5, 6, 3]'
                - input: '9 9 9 8 8 7'
                  expected_output: '[9, 9, 9, 8, 8, 7]'
              hidden: true
              hidden_cases:
                - input: '1 2 2 3 3 3'
                  expected_output: '[3, 3, 3, 2, 2, 1]'
            solution:
              content: |2-
                from collections import Counter

                def group_by_frequency(arr):
                    freq = Counter(arr)
                    arr.sort(key=lambda x: (-freq[x], arr.index(x)))
                    return arr

                if __name__ == "__main__":
                    arr = list(map(int, input().split()))
                    print(group_by_frequency(arr))

          - id: two-sum
            title: 'Two Sum Problem'
            description: >-
              Given a list of integers and a target value, return the indices (0-based) of the two numbers that add up to the target.
              If no such pair exists, return -1.
            complexity: medium
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def two_sum(nums, target):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    target = int(input())
                    print(two_sum(nums, target))
            test_cases:
              hidden: false
              visible_cases:
                - input: |-
                    2 7 11 15
                    9
                  expected_output: '[0, 1]'
                - input: |-
                    3 2 4
                    6
                  expected_output: '[1, 2]'
              hidden: true
              hidden_cases:
                - input: |-
                    1 2 3
                    7
                  expected_output: '-1'
            solution:
              content: |2-
                def two_sum(nums, target):
                    seen = {}
                    for i, num in enumerate(nums):
                        diff = target - num
                        if diff in seen:
                            return [seen[diff], i]
                        seen[num] = i
                    return -1

                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    target = int(input())
                    print(two_sum(nums, target))

          - id: longest-increasing-subsequence
            title: 'Longest Increasing Subsequence Length'
            description: Given a list of numbers, return the length of the longest increasing subsequence.
            complexity: hard
            points: 15
            time_limit_seconds: 15
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def lis_length(arr):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    arr = list(map(int, input().split()))
                    print(lis_length(arr))
            test_cases:
              hidden: false
              visible_cases:
                - input: '10 9 2 5 3 7 101 18'
                  expected_output: '4'
                - input: '1 3 5 4 7'
                  expected_output: '4'
              hidden: true
              hidden_cases:
                - input: '5 6 7 1 2 3'
                  expected_output: '3'
            solution:
              content: |2-
                def lis_length(arr):
                    if not arr:
                        return 0
                    dp = [1] * len(arr)
                    for i in range(len(arr)):
                        for j in range(i):
                            if arr[i] > arr[j]:
                                dp[i] = max(dp[i], dp[j] + 1)
                    return max(dp)

                if __name__ == "__main__":
                    arr = list(map(int, input().split()))
                    print(lis_length(arr))

          - id: valid-parentheses
            title: 'Valid Parentheses'
            description: Check if the input string of parentheses is valid (every open has a close in order).
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def is_valid_parentheses(s):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    s = input()
                    print(is_valid_parentheses(s))
            test_cases:
              hidden: false
              visible_cases:
                - input: '()[]{}'
                  expected_output: 'True'
                - input: '(]'
                  expected_output: 'False'
              hidden: true
              hidden_cases:
                - input: '([{}])'
                  expected_output: 'True'
            solution:
              content: |2-
                def is_valid_parentheses(s):
                    stack = []
                    mapping = {')': '(', ']': '[', '}': '{'}
                    for char in s:
                        if char in mapping.values():
                            stack.append(char)
                        elif char in mapping:
                            if not stack or stack.pop() != mapping[char]:
                                return False
                    return not stack

                if __name__ == "__main__":
                    s = input()
                    print(is_valid_parentheses(s))

  - id: javascript-basics
    language: javascript
    title: JavaScript Fundamentals
    description: Learn JavaScript programming from scratch
    difficulty: beginner
    estimated_hours: 20
    prerequisites: []
    topics:
      - topic_id: js_basics
        topic_title: JavaScript Basics & Control Flow
        short_description: >-
          Learn the foundation of JavaScript including variables, loops,
          conditionals, and basic logic building.
        order: 1
        questions:
          - id: even-or-odd-js
            title: 'Even or Odd'
            description: Determine if the input number is even or odd.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function isEvenOrOdd(n) {
                    // Your code here
                }

                const num = Number(prompt());
                console.log(isEvenOrOdd(num));
            test_cases:
              hidden: false
              visible_cases:
                - input: '4'
                  expected_output: 'Even'
                  explanation: '4 is divisible by 2'
                - input: '7'
                  expected_output: 'Odd'
                  explanation: '7 is not divisible by 2'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: 'Even'
                - input: '101'
                  expected_output: 'Odd'
            solution:
              content: |2-
                function isEvenOrOdd(n) {
                    return n % 2 === 0 ? "Even" : "Odd";
                }

                const num = Number(prompt());
                console.log(isEvenOrOdd(num));

          - id: sum-upto-n-js
            title: 'Sum up to N'
            description: Calculate the sum of numbers from 1 to N.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function sumUptoN(n) {
                    // Your code here
                }

                const n = Number(prompt());
                console.log(sumUptoN(n));
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '15'
                  explanation: '1 + 2 + 3 + 4 + 5 = 15'
                - input: '1'
                  expected_output: '1'
                  explanation: 'Sum of first 1 number is 1'
              hidden: true
              hidden_cases:
                - input: '100'
                  expected_output: '5050'
            solution:
              content: |2-
                function sumUptoN(n) {
                    return (n * (n + 1)) / 2;
                }

                const n = Number(prompt());
                console.log(sumUptoN(n));

          - id: fizz-buzz-js
            title: 'FizzBuzz'
            description: Print Fizz if divisible by 3, Buzz if divisible by 5, FizzBuzz if both.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function fizzBuzz(n) {
                    // Your code here
                }

                const n = Number(prompt());
                console.log(fizzBuzz(n));
            test_cases:
              hidden: false
              visible_cases:
                - input: '3'
                  expected_output: 'Fizz'
                  explanation: 'Divisible by 3'
                - input: '5'
                  expected_output: 'Buzz'
                  explanation: 'Divisible by 5'
              hidden: true
              hidden_cases:
                - input: '15'
                  expected_output: 'FizzBuzz'
                - input: '2'
                  expected_output: '2'
            solution:
              content: |2-
                function fizzBuzz(n) {
                    if (n % 3 === 0 && n % 5 === 0) return "FizzBuzz";
                    if (n % 3 === 0) return "Fizz";
                    if (n % 5 === 0) return "Buzz";
                    return String(n);
                }

                const n = Number(prompt());
                console.log(fizzBuzz(n));

          - id: multiplication-table-js
            title: 'Multiplication Table'
            description: Print the multiplication table for a number up to 10.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function printTable(n) {
                    // Your code here
                }

                const n = Number(prompt());
                printTable(n);
            test_cases:
              hidden: false
              visible_cases:
                - input: '2'
                  expected_output: "2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20"
                  explanation: 'Multiplication table from 1 to 10'
              hidden: true
              hidden_cases:
                - input: '10'
                  expected_output: "10 x 1 = 0\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100"
            solution:
              content: |2-
                function printTable(n) {
                    for (let i = 1; i <= 10; i++) {
                        console.log(`${n} x ${i} = ${n * i}`);
                    }
                }

                const n = Number(prompt());
                printTable(n);

          - id: palindrome-check-js
            title: 'Palindrome Check'
            description: Check whether the given string is a palindrome (reads the same backward and forward).
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function isPalindrome(s) {
                    // Your code here
                }

                const s = prompt();
                console.log(isPalindrome(s));
            test_cases:
              hidden: false
              visible_cases:
                - input: 'racecar'
                  expected_output: 'true'
                  explanation: 'racecar is the same forwards and backwards'
                - input: 'hello'
                  expected_output: 'false'
                  explanation: 'hello reversed is olleh'
              hidden: true
              hidden_cases:
                - input: 'madam'
                  expected_output: 'true'
                - input: 'javascript'
                  expected_output: 'false'
            solution:
              content: |2-
                function isPalindrome(s) {
                    const cleaned = s.toLowerCase();
                    return cleaned === cleaned.split('').reverse().join('');
                }

                const s = prompt();
                console.log(isPalindrome(s));

          - id: pattern-printer-js
            title: 'Pattern Printer'
            description: Print a right-angled triangle of stars of height N.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function printPattern(n) {
                    // Your code here
                }

                const n = Number(prompt());
                printPattern(n);
            test_cases:
              hidden: false
              visible_cases:
                - input: '3'
                  expected_output: "*\n**\n***"
                  explanation: 'Each line has increasing stars'
              hidden: true
              hidden_cases:
                - input: '5'
                  expected_output: "*\n**\n***\n****\n*****"
            solution:
              content: |2-
                function printPattern(n) {
                    for (let i = 1; i <= n; i++) {
                        console.log('*'.repeat(i));
                    }
                }

                const n = Number(prompt());
                printPattern(n);

      - topic_id: js_data_structures
        topic_title: Data Structures
        short_description: Work with arrays, objects, sets, and maps to manipulate and organize data efficiently.
        order: 2
        questions:
          - id: reverse-array-js
            title: 'Reverse Array'
            description: Reverse an array of integers without using built-in reverse methods.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function reverseArray(arr) {
                    // Your code here
                }

                const input = prompt().split(' ').map(Number);
                console.log(reverseArray(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5'
                  expected_output: '[5,4,3,2,1]'
                - input: '10'
                  expected_output: '[10]'
              hidden: true
              hidden_cases:
                - input: '7 8 9'
                  expected_output: '[9,8,7]'
            solution:
              content: |2-
                function reverseArray(arr) {
                    let left = 0, right = arr.length - 1;
                    while (left < right) {
                        [arr[left], arr[right]] = [arr[right], arr[left]];
                        left++;
                        right--;
                    }
                    return arr;
                }

                const input = prompt().split(' ').map(Number);
                console.log(reverseArray(input));

          - id: unique-elements-js
            title: 'Unique Elements'
            description: Return an array of only the unique elements from the input array.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function uniqueElements(arr) {
                    // Your code here
                }

                const input = prompt().split(' ');
                console.log(uniqueElements(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: 'a b c a b'
                  expected_output: '["a","b","c"]'
                - input: '1 2 2 3 4'
                  expected_output: '["1","2","3","4"]'
              hidden: true
              hidden_cases:
                - input: 'x y x z'
                  expected_output: '["x","y","z"]'
            solution:
              content: |2-
                function uniqueElements(arr) {
                    return [...new Set(arr)];
                }

                const input = prompt().split(' ');
                console.log(uniqueElements(input));

          - id: object-counter-js
            title: 'Object Word Counter'
            description: Count occurrences of each word in a sentence and return an object.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function countWords(sentence) {
                    // Your code here
                }

                const sentence = prompt();
                console.log(countWords(sentence));
            test_cases:
              hidden: false
              visible_cases:
                - input: 'apple banana apple'
                  expected_output: '{"apple":2,"banana":1}'
                - input: 'one one two'
                  expected_output: '{"one":2,"two":1}'
              hidden: true
              hidden_cases:
                - input: 'cat dog cat dog dog'
                  expected_output: '{"cat":2,"dog":3}'
            solution:
              content: |2-
                function countWords(sentence) {
                    const words = sentence.split(' ');
                    return words.reduce((acc, word) => {
                        acc[word] = (acc[word] || 0) + 1;
                        return acc;
                    }, {});
                }

                const sentence = prompt();
                console.log(countWords(sentence));

          - id: merge-objects-js
            title: 'Merge Objects'
            description: Merge two objects, summing values for matching keys.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function mergeObjects(obj1, obj2) {
                    // Your code here
                }

                const obj1 = JSON.parse(prompt());
                const obj2 = JSON.parse(prompt());
                console.log(mergeObjects(obj1, obj2));
            test_cases:
              hidden: false
              visible_cases:
                - input: '{"a": 1, "b": 2}\n{"b": 3, "c": 4}'
                  expected_output: '{"a":1,"b":5,"c":4}'
                - input: '{}\n{"x": 10}'
                  expected_output: '{"x":10}'
              hidden: true
              hidden_cases:
                - input: '{"x": 1, "y": 2}\n{"x": 4, "z": 5}'
                  expected_output: '{"x":5,"y":2,"z":5}'
            solution:
              content: |2-
                function mergeObjects(obj1, obj2) {
                    const result = { ...obj1 };
                    for (const [key, value] of Object.entries(obj2)) {
                        result[key] = (result[key] || 0) + value;
                    }
                    return result;
                }

                const obj1 = JSON.parse(prompt());
                const obj2 = JSON.parse(prompt());
                console.log(mergeObjects(obj1, obj2));

          - id: stack-simulation-js
            title: 'Stack Simulation'
            description: Implement basic stack operations (push, pop) using an array.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Stack {
                    constructor() {
                        this.items = [];
                    }

                    push(value) {
                        // Your code here
                    }

                    pop() {
                        // Your code here
                    }

                    display() {
                        return this.items;
                    }
                }

                const s = new Stack();
                s.push(1);
                s.push(2);
                s.pop();
                console.log(s.display());
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '[1]'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '[1,2]'
            solution:
              content: |2-
                class Stack {
                    constructor() {
                        this.items = [];
                    }

                    push(value) {
                        this.items.push(value);
                    }

                    pop() {
                        if (this.items.length > 0) {
                            this.items.pop();
                        }
                    }

                    display() {
                        return this.items;
                    }
                }

                const s = new Stack();
                s.push(1);
                s.push(2);
                s.pop();
                console.log(s.display());

          - id: most-common-element-js
            title: 'Most Common Element'
            description: Return the most frequent element in an array. If tie, return any one.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function mostCommon(arr) {
                    // Your code here
                }

                const input = prompt().split(' ');
                console.log(mostCommon(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: 'a b a c a'
                  expected_output: 'a'
                - input: 'x y x z x y'
                  expected_output: 'x'
              hidden: true
              hidden_cases:
                - input: '1 2 3 3 2 2'
                  expected_output: '2'
            solution:
              content: |2-
                function mostCommon(arr) {
                    const freq = arr.reduce((acc, item) => {
                        acc[item] = (acc[item] || 0) + 1;
                        return acc;
                    }, {});
                    return Object.keys(freq).reduce((a, b) => freq[a] > freq[b] ? a : b);
                }

                const input = prompt().split(' ');
                console.log(mostCommon(input));

      - topic_id: js_functions_scope
        topic_title: Functions and Scope
        short_description: Master functions, scope, and closures to create reusable and encapsulated code in JavaScript.
        order: 3
        questions:
          - id: square-number-js
            title: 'Square a Number'
            description: Write a function that returns the square of a number.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function square(n) {
                    // Your code here
                }

                const num = Number(prompt());
                console.log(square(num));
            test_cases:
              hidden: false
              visible_cases:
                - input: '4'
                  expected_output: '16'
                  explanation: '4 * 4 = 16'
                - input: '-3'
                  expected_output: '9'
                  explanation: '-3 * -3 = 9'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: '0'
            solution:
              content: |2-
                function square(n) {
                    return n * n;
                }

                const num = Number(prompt());
                console.log(square(num));

          - id: greet-name-js
            title: 'Greet by Name'
            description: Write a function that takes a name and returns a greeting message.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function greet(name) {
                    // Your code here
                }

                const name = prompt();
                console.log(greet(name));
            test_cases:
              hidden: false
              visible_cases:
                - input: 'Alice'
                  expected_output: 'Hello, Alice!'
                  explanation: 'Greets the provided name'
                - input: 'Bob'
                  expected_output: 'Hello, Bob!'
              hidden: true
              hidden_cases:
                - input: 'Zoe'
                  expected_output: 'Hello, Zoe!'
            solution:
              content: |2-
                function greet(name) {
                    return `Hello, ${name}!`;
                }

                const name = prompt();
                console.log(greet(name));

          - id: scope-check-js
            title: 'Scope Check'
            description: Predict the output based on variable scope in a function.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function scopeTest() {
                    let x = 10;
                    if (true) {
                        let x = 20;
                    }
                    return x;
                }

                console.log(scopeTest());
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '10'
                  explanation: 'Block-scoped let does not affect outer x'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '10'
            solution:
              content: |2-
                function scopeTest() {
                    let x = 10;
                    if (true) {
                        let x = 20; // Different scope, does not overwrite outer x
                    }
                    return x;
                }

                console.log(scopeTest());

          - id: counter-function-js
            title: 'Counter Function'
            description: Create a function that returns a counter that increments each time it’s called.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function createCounter() {
                    // Your code here
                }

                const counter = createCounter();
                console.log(counter());
                console.log(counter());
                console.log(counter());
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: "0\n1\n2"
                  explanation: 'Counter increments with each call'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: "0\n1\n2"
            solution:
              content: |2-
                function createCounter() {
                    let count = 0;
                    return function() {
                        return count++;
                    };
                }

                const counter = createCounter();
                console.log(counter());
                console.log(counter());
                console.log(counter());

          - id: closure-multiplier-js
            title: 'Closure Multiplier'
            description: Create a function that returns a multiplier function based on a given factor.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function createMultiplier(factor) {
                    // Your code here
                }

                const double = createMultiplier(2);
                const triple = createMultiplier(3);
                console.log(double(5));
                console.log(triple(5));
            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: "10\n15"
                  explanation: 'Double multiplies by 2, triple by 3'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: "10\n15"
            solution:
              content: |2-
                function createMultiplier(factor) {
                    return function(num) {
                        return num * factor;
                    };
                }

                const double = createMultiplier(2);
                const triple = createMultiplier(3);
                console.log(double(5));
                console.log(triple(5));

          - id: recursive-factorial-js
            title: 'Factorial (Recursion)'
            description: Use recursion to calculate the factorial of a number.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function factorial(n) {
                    // Your code here
                }

                const num = Number(prompt());
                console.log(factorial(num));
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '120'
                  explanation: '5! = 5 * 4 * 3 * 2 * 1 = 120'
                - input: '0'
                  expected_output: '1'
                  explanation: '0! is defined as 1'
              hidden: true
              hidden_cases:
                - input: '6'
                  expected_output: '720'
            solution:
              content: |2-
                function factorial(n) {
                    if (n === 0 || n === 1) return 1;
                    return n * factorial(n - 1);
                }

                const num = Number(prompt());
                console.log(factorial(num));

      - topic_id: js_arrays_methods
        topic_title: Arrays and Methods
        short_description: Explore JavaScript arrays and their powerful built-in methods to manipulate and process data effectively.
        order: 4
        questions:
          - id: array-sum-js
            title: 'Array Sum'
            description: Calculate the sum of all numbers in an array.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function arraySum(arr) {
                    // Your code here
                }

                const input = prompt().split(' ').map(Number);
                console.log(arraySum(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5'
                  expected_output: '15'
                  explanation: '1 + 2 + 3 + 4 + 5 = 15'
                - input: '10'
                  expected_output: '10'
                  explanation: 'Single element sum is itself'
              hidden: true
              hidden_cases:
                - input: '0 0 0'
                  expected_output: '0'
            solution:
              content: |2-
                function arraySum(arr) {
                    return arr.reduce((sum, num) => sum + num, 0);
                }

                const input = prompt().split(' ').map(Number);
                console.log(arraySum(input));

          - id: filter-even-js
            title: 'Filter Even Numbers'
            description: Return an array containing only the even numbers from the input array.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function filterEven(arr) {
                    // Your code here
                }

                const input = prompt().split(' ').map(Number);
                console.log(filterEven(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5 6'
                  expected_output: '[2,4,6]'
                  explanation: 'Only even numbers are kept'
                - input: '1 3 5'
                  expected_output: '[]'
                  explanation: 'No even numbers in the array'
              hidden: true
              hidden_cases:
                - input: '2 4 6 8'
                  expected_output: '[2,4,6,8]'
            solution:
              content: |2-
                function filterEven(arr) {
                    return arr.filter(num => num % 2 === 0);
                }

                const input = prompt().split(' ').map(Number);
                console.log(filterEven(input));

          - id: double-numbers-js
            title: 'Double Numbers'
            description: Return a new array with each number from the input array doubled.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function doubleNumbers(arr) {
                    // Your code here
                }

                const input = prompt().split(' ').map(Number);
                console.log(doubleNumbers(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3'
                  expected_output: '[2,4,6]'
                  explanation: 'Each number is multiplied by 2'
                - input: '0 5'
                  expected_output: '[0,10]'
              hidden: true
              hidden_cases:
                - input: '-1 2 3'
                  expected_output: '[-2,4,6]'
            solution:
              content: |2-
                function doubleNumbers(arr) {
                    return arr.map(num => num * 2);
                }

                const input = prompt().split(' ').map(Number);
                console.log(doubleNumbers(input));

          - id: find-max-js
            title: 'Find Maximum'
            description: Find and return the maximum value in an array of numbers.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function findMax(arr) {
                    // Your code here
                }

                const input = prompt().split(' ').map(Number);
                console.log(findMax(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '3 1 4 1 5'
                  expected_output: '5'
                  explanation: '5 is the largest number'
                - input: '-1 -5 -2'
                  expected_output: '-1'
                  explanation: '-1 is the largest among negatives'
              hidden: true
              hidden_cases:
                - input: '10 2 8 10'
                  expected_output: '10'
            solution:
              content: |2-
                function findMax(arr) {
                    return Math.max(...arr);
                }

                const input = prompt().split(' ').map(Number);
                console.log(findMax(input));

          - id: array-chunk-js
            title: 'Array Chunking'
            description: Split an array into chunks of a given size and return an array of these chunks.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function chunkArray(arr, size) {
                    // Your code here
                }

                const input = prompt().split(' ');
                const size = Number(prompt());
                console.log(chunkArray(input, size));
            test_cases:
              hidden: false
              visible_cases:
                - input: 'a b c d e\n2'
                  expected_output: '[["a","b"],["c","d"],["e"]]'
                  explanation: 'Array split into chunks of size 2'
                - input: '1 2 3\n1'
                  expected_output: '[["1"],["2"],["3"]]'
              hidden: true
              hidden_cases:
                - input: 'x y z w\n3'
                  expected_output: '[["x","y","z"],["w"]]'
            solution:
              content: |2-
                function chunkArray(arr, size) {
                    if (size <= 0) return [];
                    const result = [];
                    for (let i = 0; i < arr.length; i += size) {
                        result.push(arr.slice(i, i + size));
                    }
                    return result;
                }

                const input = prompt().split(' ');
                const size = Number(prompt());
                console.log(chunkArray(input, size));

          - id: flatten-array-js
            title: 'Flatten Array'
            description: Flatten a nested array (one level deep) into a single-level array.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function flattenArray(arr) {
                    // Your code here
                }

                const input = JSON.parse(prompt());
                console.log(flattenArray(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '[1, [2, 3], 4]'
                  expected_output: '[1,2,3,4]'
                  explanation: 'Nested arrays are flattened one level'
                - input: '["a", ["b"], ["c", "d"]]'
                  expected_output: '["a","b","c","d"]'
              hidden: true
              hidden_cases:
                - input: '[5, [], [6, 7]]'
                  expected_output: '[5,6,7]'
            solution:
              content: |2-
                function flattenArray(arr) {
                    return arr.reduce((flat, item) => flat.concat(Array.isArray(item) ? item : [item]), []);
                }

                const input = JSON.parse(prompt());
                console.log(flattenArray(input));

      - topic_id: js_arrays_advanced
        topic_title: Advanced Array Operations
        short_description: Dive deeper into JavaScript array manipulation with advanced methods and techniques.
        order: 6
        questions:
          - id: unique-elements-js
            title: 'Unique Elements'
            description: Return an array containing only unique elements from the input array.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function getUnique(arr) {
                    // Your code here
                }

                const input = prompt().split(' ').map(String);
                console.log(getUnique(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 2 3 3 4'
                  expected_output: '[1,2,3,4]'
                  explanation: 'Duplicates are removed'
                - input: 'a a b c'
                  expected_output: '[a,b,c]'
                  explanation: 'Only unique strings remain'
              hidden: true
              hidden_cases:
                - input: '5 5 5'
                  expected_output: '[5]'
            solution:
              content: |2-
                function getUnique(arr) {
                    return [...new Set(arr)];
                }

                const input = prompt().split(' ').map(String);
                console.log(getUnique(input));

          - id: array-intersection-js
            title: 'Array Intersection'
            description: Find and return common elements between two arrays.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function arrayIntersection(arr1, arr2) {
                    // Your code here
                }

                const input1 = prompt().split(' ').map(Number);
                const input2 = prompt().split(' ').map(Number);
                console.log(arrayIntersection(input1, input2));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4\n2 4 6'
                  expected_output: '[2,4]'
                  explanation: '2 and 4 are common in both arrays'
                - input: '5 6 7\n8 9'
                  expected_output: '[]'
                  explanation: 'No common elements'
              hidden: true
              hidden_cases:
                - input: '1 1 2\n1 2 2'
                  expected_output: '[1,2]'
            solution:
              content: |2-
                function arrayIntersection(arr1, arr2) {
                    return arr1.filter(item => arr2.includes(item));
                }

                const input1 = prompt().split(' ').map(Number);
                const input2 = prompt().split(' ').map(Number);
                console.log(arrayIntersection(input1, input2));

          - id: rotate-array-js
            title: 'Rotate Array'
            description: Rotate an array to the right by k steps.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function rotateArray(arr, k) {
                    // Your code here
                }

                const input = prompt().split(' ').map(Number);
                const k = Number(prompt());
                console.log(rotateArray(input, k));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5\n2'
                  expected_output: '[4,5,1,2,3]'
                  explanation: 'Array rotated right by 2 steps'
                - input: '1 2 3\n1'
                  expected_output: '[3,1,2]'
              hidden: true
              hidden_cases:
                - input: '1 2\n0'
                  expected_output: '[1,2]'
            solution:
              content: |2-
                function rotateArray(arr, k) {
                    k = k % arr.length;
                    return [...arr.slice(-k), ...arr.slice(0, -k)];
                }

                const input = prompt().split(' ').map(Number);
                const k = Number(prompt());
                console.log(rotateArray(input, k));

          - id: array-difference-js
            title: 'Array Difference'
            description: Return elements in the first array that are not in the second array.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function arrayDifference(arr1, arr2) {
                    // Your code here
                }

                const input1 = prompt().split(' ').map(Number);
                const input2 = prompt().split(' ').map(Number);
                console.log(arrayDifference(input1, input2));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4\n2 4'
                  expected_output: '[1,3]'
                  explanation: '1 and 3 are not in the second array'
                - input: '5 6\n5 6 7'
                  expected_output: '[]'
              hidden: true
              hidden_cases:
                - input: '1 2 3\n3 4 5'
                  expected_output: '[1,2]'
            solution:
              content: |2-
                function arrayDifference(arr1, arr2) {
                    return arr1.filter(item => !arr2.includes(item));
                }

                const input1 = prompt().split(' ').map(Number);
                const input2 = prompt().split(' ').map(Number);
                console.log(arrayDifference(input1, input2));

          - id: merge-sorted-js
            title: 'Merge Sorted Arrays'
            description: Merge two sorted arrays into a single sorted array.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function mergeSortedArrays(arr1, arr2) {
                    // Your code here
                }

                const input1 = prompt().split(' ').map(Number);
                const input2 = prompt().split(' ').map(Number);
                console.log(mergeSortedArrays(input1, input2));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 3 5\n2 4 6'
                  expected_output: '[1,2,3,4,5,6]'
                  explanation: 'Merged and sorted'
                - input: '1 2\n3'
                  expected_output: '[1,2,3]'
              hidden: true
              hidden_cases:
                - input: '2 4 6\n1 3 5'
                  expected_output: '[1,2,3,4,5,6]'
            solution:
              content: |2-
                function mergeSortedArrays(arr1, arr2) {
                    return [...arr1, ...arr2].sort((a, b) => a - b);
                }

                const input1 = prompt().split(' ').map(Number);
                const input2 = prompt().split(' ').map(Number);
                console.log(mergeSortedArrays(input1, input2));

          - id: array-partition-js
            title: 'Partition Array'
            description: Partition an array into two groups based on a condition (e.g., even vs. odd).
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function partitionArray(arr) {
                    // Your code here
                }

                const input = prompt().split(' ').map(Number);
                console.log(partitionArray(input));
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5'
                  expected_output: '[[2,4],[1,3,5]]'
                  explanation: 'Even numbers in first group, odd in second'
                - input: '1 3 5'
                  expected_output: '[[],[1,3,5]]'
                  explanation: 'No even numbers'
              hidden: true
              hidden_cases:
                - input: '2 4 6'
                  expected_output: '[[2,4,6],[]]'
            solution:
              content: |2-
                function partitionArray(arr) {
                    return [arr.filter(num => num % 2 === 0), arr.filter(num => num % 2 !== 0)];
                }

                const input = prompt().split(' ').map(Number);
                console.log(partitionArray(input));