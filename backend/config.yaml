title: Code Gym
description: A platform for practicing programming skills through structured exercises
version: 1.0.0
maintainer: your-email@example.com
languages:
  - id: python
    name: Python
    version: '3.12'
  - id: javascript
    name: JavaScript
    version: ES2022
courses:
  - id: python-course
    language: python
    title: Python Fundamentals
    description: Learn Python programming from scratch
    difficulty: beginner
    estimated_hours: 20
    prerequisites: []
    topics:                              
      - topic_id: python_basics
        topic_title: Python Basics & Control Flow
        questions:
          - id: even-or-odd
            title: 'Even or Odd'
            description: |
              Write a function that determines whether a given integer is even or odd.
            input: |
              A single integer n
            input_constraints: |
              -1000 <= n <= 1000
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def is_even_or_odd(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    num = int(input())
                    print(is_even_or_odd(num))
            test_cases:
              hidden: false
              visible_cases:
                - input: '4'
                  expected_output: 'Even'
                  explanation: '4 is divisible by 2'
                - input: '7'
                  expected_output: 'Odd'
                  explanation: '7 is not divisible by 2'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: 'Even'
                - input: '101'
                  expected_output: 'Odd'
            solution:
              content: |2-
                def is_even_or_odd(n):
                    return "Even" if n % 2 == 0 else "Odd"

                if __name__ == "__main__":
                    num = int(input())
                    print(is_even_or_odd(num))

          - id: sum-upto-n
            title: 'Sum up to N'
            description: Write a function that calculates the sum of all integers from 1 to a given number N.
            input: |
              A single integer n
            input_constraints: |
              1 <= n <= 10^6
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def sum_upto_n(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(sum_upto_n(n))
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '15'
                  explanation: '1 + 2 + 3 + 4 + 5 = 15'
                - input: '1'
                  expected_output: '1'
                  explanation: 'Sum of first 1 number is 1'
              hidden: true
              hidden_cases:
                - input: '100'
                  expected_output: '5050'
            solution:
              content: |2-
                def sum_upto_n(n):
                    return n * (n + 1) // 2

                if __name__ == "__main__":
                    n = int(input())
                    print(sum_upto_n(n))

          - id: fizz-buzz
            title: 'FizzBuzz'
            description: |
              Write a function that returns:
              - "Fizz" if the number is divisible by 3,
              - "Buzz" if the number is divisible by 5,
              - "FizzBuzz" if the number is divisible by both 3 and 5,
              - Otherwise, return the number itself as a string.
            input: |
              A single integer n
            input_constraints: |
              1 <= n <= 10^4
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def fizz_buzz(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(fizz_buzz(n))
            test_cases:
              hidden: false
              visible_cases:
                - input: '3'
                  expected_output: 'Fizz'
                  explanation: 'Divisible by 3'
                - input: '5'
                  expected_output: 'Buzz'
                  explanation: 'Divisible by 5'
              hidden: true
              hidden_cases:
                - input: '15'
                  expected_output: 'FizzBuzz'
                - input: '2'
                  expected_output: '2'
            solution:
              content: |2-
                def fizz_buzz(n):
                    if n % 3 == 0 and n % 5 == 0:
                        return "FizzBuzz"
                    elif n % 3 == 0:
                        return "Fizz"
                    elif n % 5 == 0:
                        return "Buzz"
                    else:
                        return str(n)

                if __name__ == "__main__":
                    n = int(input())
                    print(fizz_buzz(n))

          - id: multiplication-table
            title: 'Multiplication Table'
            description: |
              Write a function that prints the multiplication table of a given number from 1 to 10.
              Each line should be in the format: `n x i = result`.
            input: |
              A single integer n
            input_constraints: |
              1 <= n <= 100
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def print_table(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print_table(n)
            test_cases:
              hidden: false
              visible_cases:
                - input: '2'
                  expected_output: "2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20"
                  explanation: 'Multiplication table from 1 to 10'
              hidden: true
              hidden_cases:
                - input: '10'
                  expected_output: "10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100"
            solution:
              content: |2-
                def print_table(n):
                    for i in range(1, 11):
                        print(f"{n} x {i} = {n * i}")

                if __name__ == "__main__":
                    n = int(input())
                    print_table(n)

          - id: digit-mirror-pyramid
            title: 'Digit Mirror Pyramid'
            description: |
              Write a function to print a mirrored pyramid of digits of height `N`. Each row `i` should contain numbers in ascending order from 1 to i, followed by descending order back to 1.
              The pyramid must be centered using spaces on the left for symmetry.
            input: |
              A single integer n representing the height of the pyramid
            input_constraints: |
              1 <= n <= 20
            complexity: hard
            points: 20
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def print_mirror_pyramid(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print_mirror_pyramid(n)
            test_cases:
              hidden: false
              visible_cases:
                - input: '3'
                  expected_output: "  1\n 121\n12321"
                  explanation: 'Pyramid with mirrored digits'
              hidden: true
              hidden_cases:
                - input: '5'
                  expected_output: "    1\n   121\n  12321\n 1234321\n123454321"
                - input: '6'
                  expected_output: "     1\n    121\n   12321\n  1234321\n 123454321\n12345654321"
            solution:
              content: |2-
                def print_mirror_pyramid(n):
                    for i in range(1, n + 1):
                        # Leading spaces
                        spaces = ' ' * (n - i)
                        # Ascending numbers
                        left = ''.join(str(j) for j in range(1, i + 1))
                        # Descending numbers
                        right = ''.join(str(j) for j in range(i - 1, 0, -1))
                        print(spaces + left + right)

                if __name__ == "__main__":
                    n = int(input())
                    print_mirror_pyramid(n)


          - id: diamond-printer
            title: 'Diamond Shape Printer'
            description: |
              Write a function that prints a diamond made of stars (`*`) given an odd integer `N`. The widest row (middle) should contain `N` stars.
              The output should be vertically symmetric and properly aligned with spaces.
            input: |
              A single odd integer n
            input_constraints: |
              1 <= n <= 99  
              n is always an odd number
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def print_diamond(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print_diamond(n)
            test_cases:
              hidden: false
              visible_cases:
                - input: '3'
                  expected_output: " *\n***\n *"
                  explanation: 'Diamond with 3 rows, symmetrical'
              hidden: true
              hidden_cases:
                - input: '5'
                  expected_output: "  *\n ***\n*****\n ***\n  *"
                - input: '7'
                  expected_output: "   *\n  ***\n *****\n*******\n *****\n  ***\n   *"
            solution:
              content: |2-
                def print_diamond(n):
                    for i in range(1, n + 1, 2):
                        spaces = (n - i) // 2
                        print(' ' * spaces + '*' * i)
                    for i in range(n - 2, 0, -2):
                        spaces = (n - i) // 2
                        print(' ' * spaces + '*' * i)

                if __name__ == "__main__":
                    n = int(input())
                    print_diamond(n)

      - topic_id: functions_recursion
        topic_title: Functions and Recursion
        questions:
          - id: square-number
            title: 'Square a Number'
            description: Write a function that takes an integer and returns its square (the number multiplied by itself).
            input: A single integer n.
            input_constraints: -1000 <= n <= 1000
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def square(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    num = int(input())
                    print(square(num))
            test_cases:
              hidden: false
              visible_cases:
                - input: '4'
                  expected_output: '16'
                - input: '-3'
                  expected_output: '9'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: '0'
            solution:
              content: |2-
                def square(n):
                    return n * n

                if __name__ == "__main__":
                    num = int(input())
                    print(square(num))

          - id: greet-name
            title: 'Greet by Name'
            description: Write a function that takes a string name and returns a personalized greeting in the format "Hello, Name!".
            input: A single word string representing a person's name.
            input_constraints: 1 <= length of name <= 50
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def greet(name):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    name = input()
                    print(greet(name))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'Alice'
                  expected_output: 'Hello, Alice!'
                - input: 'Bob'
                  expected_output: 'Hello, Bob!'
              hidden: true
              hidden_cases:
                - input: 'Zoe'
                  expected_output: 'Hello, Zoe!'
            solution:
              content: |2-
                def greet(name):
                    return f"Hello, {name}!"

                if __name__ == "__main__":
                    name = input()
                    print(greet(name))

          - id: factorial-recursion
            title: 'Factorial (Recursion)'
            description: Write a recursive function that computes the factorial of a non-negative integer n. The factorial of n is the product of all positive integers less than or equal to n.
            input: A single integer n.
            input_constraints: 0 <= n <= 12
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def factorial(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    num = int(input())
                    print(factorial(num))
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '120'
                - input: '0'
                  expected_output: '1'
              hidden: true
              hidden_cases:
                - input: '6'
                  expected_output: '720'
            solution:
              content: |2-
                def factorial(n):
                    if n == 0 or n == 1:
                        return 1
                    return n * factorial(n - 1)

                if __name__ == "__main__":
                    num = int(input())
                    print(factorial(num))

          - id: fibonacci-recursion
            title: 'Fibonacci (Recursion)'
            description: Write a recursive function that returns the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.
            input: A single integer n.
            input_constraints: 0 <= n <= 20
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def fibonacci(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    num = int(input())
                    print(fibonacci(num))
            test_cases:
              hidden: false
              visible_cases:
                - input: '0'
                  expected_output: '0'
                - input: '1'
                  expected_output: '1'
              hidden: true
              hidden_cases:
                - input: '5'
                  expected_output: '5'
            solution:
              content: |2-
                def fibonacci(n):
                    if n <= 1:
                        return n
                    return fibonacci(n - 1) + fibonacci(n - 2)

                if __name__ == "__main__":
                    num = int(input())
                    print(fibonacci(num))

          - id: pascals-triangle
            title: "Pascal's Triangle"
            description: |
              Write a function that prints Pascal's Triangle up to height `n`. Each row contains values of binomial coefficients, where each number is the sum of the two numbers directly above it.

              For example, for `n = 4`, the output would be:
              ```
              1
              1 1
              1 2 1
              1 3 3 1
              ```
            input: A single integer n.
            input_constraints: 1 <= n <= 10
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def print_pascals_triangle(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    height = int(input())
                    print_pascals_triangle(height)
            test_cases:
              hidden: false
              visible_cases:
                - input: '2'
                  expected_output: "1\n1 1"
                - input: '3'
                  expected_output: "1\n1 1\n1 2 1"
              hidden: true
              hidden_cases:
                - input: '5'
                  expected_output: "1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1"
            solution:
              content: |2-
                def print_pascals_triangle(n):
                    for i in range(n):
                        val = 1
                        row = []
                        for j in range(i + 1):
                            row.append(str(val))
                            val = val * (i - j) // (j + 1)
                        print(" ".join(row))

                if __name__ == "__main__":
                    height = int(input())
                    print_pascals_triangle(height)

          - id: is-palindrome-recursion
            title: 'Check Palindrome (Recursion)'
            description: Write a recursive function to check if a given string is a palindrome. A palindrome is a word that reads the same backward as forward.
            input: A lowercase string s without spaces or punctuation.
            input_constraints: 1 <= length of s <= 100
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def is_palindrome(s):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    text = input()
                    print(is_palindrome(text))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'madam'
                  expected_output: 'True'
                - input: 'hello'
                  expected_output: 'False'
              hidden: true
              hidden_cases:
                - input: 'racecar'
                  expected_output: 'True'
            solution:
              content: |2-
                def is_palindrome(s):
                    if len(s) <= 1:
                        return True
                    if s[0] != s[-1]:
                        return False
                    return is_palindrome(s[1:-1])

                if __name__ == "__main__":
                    text = input()
                    print(is_palindrome(text))
        
      - topic_id: algos
        topic_title: Algorithms and Problem Solving
        questions:
          - id: reverse-list
            title: 'Reverse List'
            description: Reverse a list of integers without using built-in reverse methods.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            input: A list of integers.
            input_constraints: The list will contain 1 to 1000 integers, each between -1000 and 1000.
            starter_code:
              content: |2-
                def reverse_list(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(reverse_list(lst))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5'
                  expected_output: '[5, 4, 3, 2, 1]'
                - input: '10'
                  expected_output: '[10]'
              hidden: true
              hidden_cases:
                - input: '7 8 9'
                  expected_output: '[9, 8, 7]'
            solution:
              content: |2-
                def reverse_list(lst):
                    return lst[::-1]

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(reverse_list(lst))

          - id: unique-elements
            title: 'Unique Elements'
            description: Return a list of only the unique elements from the input list.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            input: A list of elements (strings, integers, or mix).
            input_constraints: The list will contain 1 to 1000 elements.
            starter_code:
              content: |2-
                def unique_elements(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst = input().split()
                    print(unique_elements(lst))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'a b c a b'
                  expected_output: "['a', 'b', 'c']"
                - input: '1 2 2 3 4'
                  expected_output: "['1', '2', '3', '4']"
              hidden: true
              hidden_cases:
                - input: 'x y x z'
                  expected_output: "['x', 'y', 'z']"
            solution:
              content: |2-
                def unique_elements(lst):
                    return list(dict.fromkeys(lst))

                if __name__ == "__main__":
                    lst = input().split()
                    print(unique_elements(lst))

          - id: merge-sorted-lists
            title: 'Merge Sorted Lists'
            description: Merge two sorted lists into one sorted list.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            input: Two sorted lists of integers.
            input_constraints: Each list will contain 1 to 1000 integers with values between -1000 and 1000.
            starter_code:
              content: |2-
                def merge_lists(lst1, lst2):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst1 = list(map(int, input().split()))
                    lst2 = list(map(int, input().split()))
                    print(merge_lists(lst1, lst2))
            test_cases:
              hidden: false
              visible_cases:
                - input: | 
                    1 3 5
                    2 4 6
                  expected_output: '[1, 2, 3, 4, 5, 6]'
                - input: | 
                    10 20 30
                    5 15 25
                  expected_output: '[5, 10, 15, 20, 25, 30]'
              hidden: true
              hidden_cases:
                - input: | 
                    1 2 3 4
                    5 6 7 8
                  expected_output: '[1, 2, 3, 4, 5, 6, 7, 8]'
            solution:
              content: |2-
                def merge_lists(lst1, lst2):
                    i, j, result = 0, 0, []
                    while i < len(lst1) and j < len(lst2):
                        if lst1[i] < lst2[j]:
                            result.append(lst1[i])
                            i += 1
                        else:
                            result.append(lst2[j])
                            j += 1
                    result.extend(lst1[i:])
                    result.extend(lst2[j:])
                    return result

                if __name__ == "__main__":
                    lst1 = list(map(int, input().split()))
                    lst2 = list(map(int, input().split()))
                    print(merge_lists(lst1, lst2))

          - id: longest-substring
            title: 'Longest Substring Without Repeating Characters'
            description: Find the length of the longest substring of a string without repeating characters.
            complexity: medium
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            input: A string containing alphanumeric characters.
            input_constraints: The string will contain 1 to 1000 characters.
            starter_code:
              content: |2-
                def longest_substring(s):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    s = input()
                    print(longest_substring(s))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'abcabcbb'
                  expected_output: '3'
                - input: 'bbbbb'
                  expected_output: '1'
              hidden: true
              hidden_cases:
                - input: 'pwwkew'
                  expected_output: '3'
            solution:
              content: |2-
                def longest_substring(s):
                    char_map = {}
                    left = max_length = 0
                    for right, char in enumerate(s):
                        if char in char_map and char_map[char] >= left:
                            left = char_map[char] + 1
                        char_map[char] = right
                        max_length = max(max_length, right - left + 1)
                    return max_length

                if __name__ == "__main__":
                    s = input()
                    print(longest_substring(s))

          - id: longest-increasing-subsequence
            title: 'Longest Increasing Subsequence'
            description: Find the length of the longest increasing subsequence in a list of integers.
            complexity: hard
            points: 15
            time_limit_seconds: 15
            memory_limit_mb: 64
            input: A list of integers.
            input_constraints: The list will contain 1 to 1000 integers, each between -1000 and 1000.
            starter_code:
              content: |2-
                def longest_increasing_subsequence(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(longest_increasing_subsequence(lst))
            test_cases:
              hidden: false
              visible_cases:
                - input: '10 9 2 5 3 7 101 18'
                  expected_output: '4'
                - input: '0 8 4 7 5 3 1'
                  expected_output: '4'
              hidden: true
              hidden_cases:
                - input: '3 2 6 4 5 1'
                  expected_output: '3'
            solution:
              content: |2-
                def longest_increasing_subsequence(lst):
                    if not lst:
                        return 0
                    n = len(lst)
                    dp = [1] * n
                    for i in range(1, n):
                        for j in range(i):
                            if lst[i] > lst[j]:
                                dp[i] = max(dp[i], dp[j] + 1)
                    return max(dp)

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(longest_increasing_subsequence(lst))
          - id: maximum-sum-subarray
            title: 'Maximum Sum Subarray'
            description: Find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
            complexity: hard
            points: 15
            time_limit_seconds: 15
            memory_limit_mb: 128
            input: A list of integers, where the list may contain both positive and negative numbers.
            input_constraints: 
              - The list will contain 2 to 100,000 integers.
              - Each integer in the list will be between -10^5 and 10^5.
            starter_code:
              content: |2-
                def maximum_sum_subarray(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(maximum_sum_subarray(lst))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 -2 3 4 -1 2 1 -5 4'
                  expected_output: '6'
                - input: '-2 1 -3 4 -1 2 1 -5 4'
                  expected_output: '6'
              hidden: true
              hidden_cases:
                - input: '5 -1 3 4 -2 2 1 -3'
                  expected_output: '12'  # Corrected expected output
                - input: '-5 -1 -2 -3 -4'
                  expected_output: '-1'
            solution:
              content: |2-
                def maximum_sum_subarray(lst):
                    # Initialize the maximum sum to the first element
                    max_sum = current_sum = lst[0]
                    
                    # Iterate through the array starting from the second element
                    for num in lst[1:]:
                        # Update current_sum: either start fresh from current number or continue the subarray
                        current_sum = max(num, current_sum + num)
                        # Update max_sum to the larger value
                        max_sum = max(max_sum, current_sum)
                    
                    return max_sum

                if __name__ == "__main__":
                    lst = list(map(int, input().split()))
                    print(maximum_sum_subarray(lst))

      - topic_id: oops
        topic_title: Object-Oriented Programming
        questions:
          - id: class-inheritance
            title: 'Class Inheritance'
            description: |
              Implement a class hierarchy where `Shape` is the base class. The `Circle` class should inherit from `Shape` and 
              implement a method to calculate the area of the circle using its radius. This method should be inherited from the 
              `Shape` class and used in the `Circle` class.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            input: |
              The input consists of a single float value representing the radius of the circle.
            input_constraints: |
              - The radius value will be a positive number between 0 and 100.
            starter_code:
              content: |
                import math

                class Shape:
                    def area(self):
                        pass

                class Circle(Shape):
                    def __init__(self, radius):
                        self.radius = radius
                    
                    # TODO: Implement area method to calculate circle's area
                    def area(self):
                        pass

                if __name__ == "__main__":
                    r = float(input())
                    c = Circle(r)
                    print(c.area())
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '78.53975'
                - input: '10'
                  expected_output: '314.1595'
              hidden: true
              hidden_cases:
                - input: '7'
                  expected_output: '153.93804'
            solution:
              content: |
                import math

                class Shape:
                    def area(self):
                        pass

                class Circle(Shape):
                    def __init__(self, radius):
                        self.radius = radius
                    
                    def area(self):
                        return math.pi * self.radius ** 2

                if __name__ == "__main__":
                    r = float(input())
                    c = Circle(r)
                    print(c.area())

          - id: student-class
            title: 'Student Class'
            description: |
              Define a `Student` class with attributes for the student's `name` and `marks`. Implement methods in the class 
              to retrieve the student's name and to calculate their average marks.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            input: |
              The first input is the name of the student. The second input is a list of their marks.
            input_constraints: |
              - Name will be a non-empty string.
              - Marks will be a list of 2 to 10 integers, each between 0 and 100.
            starter_code:
              content: |
                class Student:
                    def __init__(self, name, marks):
                        self.name = name
                        self.marks = marks

                    def average_marks(self):
                        # TODO: Calculate and return the average of marks
                        pass

                if __name__ == "__main__":
                    name = input()
                    marks = list(map(int, input().split()))
                    s = Student(name, marks)
                    print(s.name)
                    print(s.average_marks())
            test_cases:
              hidden: false
              visible_cases:
                - input: | 
                    Alice 
                    90 80 85
                  expected_output: | 
                    Alice
                    85.0
                - input: | 
                    Bob 
                    60 70 75 80
                  expected_output: | 
                    Bob
                    71.25
              hidden: true
              hidden_cases:
                - input: | 
                    Charlie
                    100 100 100
                  expected_output: | 
                    Charlie
                    100.0
            solution:
              content: |
                class Student:
                    def __init__(self, name, marks):
                        self.name = name
                        self.marks = marks

                    def average_marks(self):
                        return sum(self.marks) / len(self.marks)

                if __name__ == "__main__":
                    name = input()
                    marks = list(map(int, input().split()))
                    s = Student(name, marks)
                    print(s.name)
                    print(s.average_marks())

          - id: bank-account
            title: 'Bank Account'
            description: |
              Design a `BankAccount` class that provides functionality for depositing money, withdrawing money, and checking 
              the account balance. Ensure that the account balance cannot go below zero after a withdrawal.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            input: |
              The first input will be a positive integer representing the deposit amount. The second input will be a positive integer 
              representing the withdrawal amount.
            input_constraints: |
              - Deposit and withdrawal amounts are between 1 and 10,000.
            starter_code:
              content: |
                class BankAccount:
                    def __init__(self, balance=0):
                        self.balance = balance

                    def deposit(self, amount):
                        # TODO: Implement deposit logic
                        pass

                    def withdraw(self, amount):
                        # TODO: Implement withdraw logic, check for sufficient funds
                        pass

                if __name__ == "__main__":
                    account = BankAccount()
                    deposit_amount = int(input())
                    withdrawal_amount = int(input())
                    account.deposit(deposit_amount)
                    account.withdraw(withdrawal_amount)
                    print(account.balance)
            test_cases:
              hidden: false
              visible_cases:
                - input: | 
                    100
                    50
                  expected_output: '50'
                - input: | 
                    500
                    200
                  expected_output: '300'
              hidden: true
              hidden_cases:
                - input: | 
                    1000
                    500
                  expected_output: '500'
            solution:
              content: |
                class BankAccount:
                    def __init__(self, balance=0):
                        self.balance = balance

                    def deposit(self, amount):
                        self.balance += amount

                    def withdraw(self, amount):
                        if self.balance >= amount:
                            self.balance -= amount
                        else:
                            print("Insufficient funds")

                if __name__ == "__main__":
                    account = BankAccount()
                    deposit_amount = int(input())
                    withdrawal_amount = int(input())
                    account.deposit(deposit_amount)
                    account.withdraw(withdrawal_amount)
                    print(account.balance)

          - id: vehicle-hierarchy
            title: 'Vehicle Hierarchy with Details'
            description: |
              Design a class hierarchy for a `Vehicle` class, with two derived classes: `Car` and `Truck`.

              Each vehicle has a make and model. Additionally:
              - Each `Car` has a number of seats (integer).
              - Each `Truck` has a payload capacity in tons (float).

              Each class must implement a method to display all details of that vehicle:
              - For a car: display "<make> <model> - Seats: <seats>"
              - For a truck: display "<make> <model> - Payload: <capacity> tons"

              Your task is to complete the class structure and implement the logic to display the correct details.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            input: |
              The input consists of:
              - A line with the vehicle type: "Car" or "Truck"
              - A line with the make of the vehicle
              - A line with the model of the vehicle
              - A line with the specific value:
                - For Car: number of seats (integer)
                - For Truck: payload capacity (float)
            input_constraints: |
              - Vehicle type is either "Car" or "Truck"
              - Make and model are non-empty strings
              - Seats will be an integer between 1 and 10
              - Payload capacity will be a float between 0.5 and 40.0
            starter_code:
              content: |
                class Vehicle:
                    def __init__(self, make, model):
                        self.make = make
                        self.model = model

                    def show_details(self):
                        # TODO: To be overridden in subclasses
                        pass

                class Car(Vehicle):
                    def __init__(self, make, model, seats):
                        super().__init__(make, model)
                        self.seats = seats

                    def show_details(self):
                        # TODO: Print "<make> <model> - Seats: <seats>"
                        pass

                class Truck(Vehicle):
                    def __init__(self, make, model, capacity):
                        super().__init__(make, model)
                        self.capacity = capacity

                    def show_details(self):
                        # TODO: Print "<make> <model> - Payload: <capacity> tons"
                        pass

                if __name__ == "__main__":
                    vehicle_type = input()
                    make = input()
                    model = input()
                    if vehicle_type == "Car":
                        seats = int(input())
                        v = Car(make, model, seats)
                    elif vehicle_type == "Truck":
                        capacity = float(input())
                        v = Truck(make, model, capacity)
                    v.show_details()
            test_cases:
              hidden: false
              visible_cases:
                - input: |
                    Car
                    Honda
                    Civic
                    5
                  expected_output: |
                    Honda Civic - Seats: 5
                - input: |
                    Truck
                    Volvo
                    FH16
                    18.5
                  expected_output: |
                    Volvo FH16 - Payload: 18.5 tons
              hidden: true
              hidden_cases:
                - input: |
                    Car
                    Toyota
                    Camry
                    4
                  expected_output: |
                    Toyota Camry - Seats: 4
                - input: |
                    Truck
                    Tata
                    LPT
                    22.0
                  expected_output: |
                    Tata LPT - Payload: 22.0 tons
            solution:
              content: |
                class Vehicle:
                    def __init__(self, make, model):
                        self.make = make
                        self.model = model

                    def show_details(self):
                        pass

                class Car(Vehicle):
                    def __init__(self, make, model, seats):
                        super().__init__(make, model)
                        self.seats = seats

                    def show_details(self):
                        print(f"{self.make} {self.model} - Seats: {self.seats}")

                class Truck(Vehicle):
                    def __init__(self, make, model, capacity):
                        super().__init__(make, model)
                        self.capacity = capacity

                    def show_details(self):
                        print(f"{self.make} {self.model} - Payload: {self.capacity} tons")

                if __name__ == "__main__":
                    vehicle_type = input()
                    make = input()
                    model = input()
                    if vehicle_type == "Car":
                        seats = int(input())
                        v = Car(make, model, seats)
                    elif vehicle_type == "Truck":
                        capacity = float(input())
                        v = Truck(make, model, capacity)
                    v.show_details()

          - id: employee-salary
            title: 'Employee Salary'
            description: |
              Create an `Employee` class that calculates the salary of an employee based on their hourly rate and the hours they work.
              The class should also have a method that checks if the employee is eligible for a bonus based on the total salary.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 64
            input: |
              The first input is the hourly rate, and the second input is the hours worked.
            input_constraints: |
              - The hourly rate is between 10 and 200.
              - The hours worked are between 1 and 80.
            starter_code:
              content: |
                class Employee:
                    def __init__(self, hourly_rate, hours_worked):
                        self.hourly_rate = hourly_rate
                        self.hours_worked = hours_worked

                    def salary(self):
                        # TODO: Calculate and return total salary
                        pass

                    def is_eligible_for_bonus(self):
                        # TODO: Check if salary exceeds 1000 for bonus eligibility
                        pass

                if __name__ == "__main__":
                    rate = float(input())
                    hours = int(input())
                    e = Employee(rate, hours)
                    print(e.salary())
                    print(e.is_eligible_for_bonus())
            test_cases:
              hidden: false
              visible_cases:
                - input: | 
                    20
                    40
                  expected_output: | 
                    800
                    False
                - input: | 
                    25
                    50
                  expected_output: | 
                    1250
                    True
              hidden: true
              hidden_cases:
                - input: | 
                    30
                    60
                  expected_output: | 
                    1800
                    True
            solution:
              content: |
                class Employee:
                    def __init__(self, hourly_rate, hours_worked):
                        self.hourly_rate = hourly_rate
                        self.hours_worked = hours_worked

                    def salary(self):
                        return self.hourly_rate * self.hours_worked

                    def is_eligible_for_bonus(self):
                        return self.salary() > 1000

                if __name__ == "__main__":
                    rate = float(input())
                    hours = int(input())
                    e = Employee(rate, hours)
                    print(e.salary())
                    print(e.is_eligible_for_bonus())

          - id: library-management
            title: 'Library Management System'
            description: |
              Create two classes: `Book` and `Library`.

              The `Book` class should store information about a book, including its title, author, and ISBN. The `Library` class will manage a collection of books and allow adding and removing books by ISBN.

              You will receive a sequence of commands to add or remove books. After executing all operations, print the total number of books left in the library.
            complexity: hard
            points: 15
            time_limit_seconds: 15
            memory_limit_mb: 128
            input: |
              The first input is an integer N, the number of commands (1 <= N <= 100).

              This is followed by N commands, where each command is one of:
              - "Add <title> <author> <isbn>": Add a book with the given title, author, and ISBN.
              - "Remove <isbn>": Remove the book with the given ISBN.

              Example:
                2
                Add Book1 Author1 123
                Remove 123
            input_constraints: |
              - Title, author, and ISBN are non-empty strings without spaces.
              - ISBNs are unique when adding.
              - 1 <= N <= 100.
            starter_code:
              content: |
                class Book:
                    def __init__(self, title, author, isbn):
                        self.title = title
                        self.author = author
                        self.isbn = isbn

                class Library:
                    def __init__(self):
                        self.books = []

                    def add_book(self, book):
                        # TODO: Implement adding a book to the collection
                        pass

                    def remove_book(self, isbn):
                        # TODO: Implement removing a book by ISBN
                        pass

                if __name__ == "__main__":
                    n = int(input())
                    library = Library()
                    for _ in range(n):
                        command = input().strip().split()
                        if command[0] == "Add":
                            title, author, isbn = command[1:]
                            book = Book(title, author, isbn)
                            library.add_book(book)
                        elif command[0] == "Remove":
                            isbn = command[1]
                            library.remove_book(isbn)
                    print(f"Total books: {len(library.books)}")
            test_cases:
              hidden: false
              visible_cases:
                - input: |
                    2
                    Add Book1 Author1 123
                    Remove 123
                  expected_output: |
                    Total books: 0
                - input: |
                    3
                    Add Book2 Author2 124
                    Add Book3 Author3 125
                    Remove 124
                  expected_output: |
                    Total books: 1
              hidden: true
              hidden_cases:
                - input: |
                    2
                    Add Book4 Author4 126
                    Remove 126
                  expected_output: |
                    Total books: 0
                - input: |
                    3
                    Add Book5 Author5 127
                    Add Book6 Author6 128
                    Remove 999
                  expected_output: |
                    Total books: 2
            solution:
              content: |
                class Book:
                    def __init__(self, title, author, isbn):
                        self.title = title
                        self.author = author
                        self.isbn = isbn

                class Library:
                    def __init__(self):
                        self.books = []

                    def add_book(self, book):
                        self.books.append(book)

                    def remove_book(self, isbn):
                        self.books = [book for book in self.books if book.isbn != isbn]

                if __name__ == "__main__":
                    n = int(input())
                    library = Library()
                    for _ in range(n):
                        command = input().strip().split()
                        if command[0] == "Add":
                            title, author, isbn = command[1:]
                            book = Book(title, author, isbn)
                            library.add_book(book)
                        elif command[0] == "Remove":
                            isbn = command[1]
                            library.remove_book(isbn)
                    print(f"Total books: {len(library.books)}")
      
      - topic_id: iterators-generators
        topic_title: Iterators and Generators
        questions:
          - id: simple-iterator
            title: 'Simple Range Iterator'
            description: |
              Implement a class `RangeIterator` that iterates over a range of integers from `start` to `end` (inclusive) with a given `step`. The class should implement the iterator protocol (`__iter__` and `__next__`).
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            input: |
              The input consists of three integers on a single line: `start`, `end`, and `step`.
              The iterator should produce numbers from `start` to `end` (inclusive) with the given `step`.
              Print all numbers produced by the iterator, separated by spaces.
            input_constraints: |
              - -100 <= start, end <= 100
              - 1 <= step <= 10
              - start <= end
            starter_code:
              content: |
                class RangeIterator:
                    def __init__(self, start, end, step):
                        self.start = start
                        self.end = end
                        self.step = step
                    
                    def __iter__(self):
                        # TODO: Return iterator object
                        pass
                    
                    def __next__(self):
                        # TODO: Return next number or raise StopIteration
                        pass

                if __name__ == "__main__":
                    start, end, step = map(int, input().split())
                    iterator = RangeIterator(start, end, step)
                    print(" ".join(str(x) for x in iterator))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 5 1'
                  expected_output: '1 2 3 4 5'
                - input: '0 6 2'
                  expected_output: '0 2 4 6'
              hidden: true
              hidden_cases:
                - input: '2 8 3'
                  expected_output: '2 5 8'
            solution:
              content: |
                class RangeIterator:
                    def __init__(self, start, end, step):
                        self.start = start
                        self.end = end
                        self.step = step
                        self.current = start
                    
                    def __iter__(self):
                        return self
                    
                    def __next__(self):
                        if self.current > self.end:
                            raise StopIteration
                        result = self.current
                        self.current += self.step
                        return result

                if __name__ == "__main__":
                    start, end, step = map(int, input().split())
                    iterator = RangeIterator(start, end, step)
                    print(" ".join(str(x) for x in iterator))

          - id: fibonacci-generator
            title: 'Fibonacci Generator'
            description: |
              Implement a generator function `fibonacci(n)` that yields the first `n` numbers in the Fibonacci sequence (starting with 0, 1).
              The sequence is: 0, 1, 1, 2, 3, 5, 8, ...
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            input: |
              The input is a single integer `n`, the number of Fibonacci numbers to generate.
              Print the generated numbers, separated by spaces.
            input_constraints: |
              - 1 <= n <= 20
            starter_code:
              content: |
                def fibonacci(n):
                    # TODO: Implement generator for first n Fibonacci numbers
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(" ".join(str(x) for x in fibonacci(n)))
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '0 1 1 2 3'
                - input: '7'
                  expected_output: '0 1 1 2 3 5 8'
              hidden: true
              hidden_cases:
                - input: '3'
                  expected_output: '0 1 1'
            solution:
              content: |
                def fibonacci(n):
                    a, b = 0, 1
                    for _ in range(n):
                        yield a
                        a, b = b, a + b

                if __name__ == "__main__":
                    n = int(input())
                    print(" ".join(str(x) for x in fibonacci(n)))

          - id: prime-generator
            title: 'Prime Number Generator'
            description: |
              Implement a generator function `primes_up_to(n)` that yields all prime numbers up to `n` (inclusive).
              A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            input: |
              The input is a single integer `n`, the upper bound for generating prime numbers.
              Print the generated prime numbers, separated by spaces.
            input_constraints: |
              - 2 <= n <= 1000
            starter_code:
              content: |
                def primes_up_to(n):
                    # TODO: Implement generator for prime numbers up to n
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(" ".join(str(x) for x in primes_up_to(n)))
            test_cases:
              hidden: false
              visible_cases:
                - input: '10'
                  expected_output: '2 3 5 7'
                - input: '20'
                  expected_output: '2 3 5 7 11 13 17 19'
              hidden: true
              hidden_cases:
                - input: '15'
                  expected_output: '2 3 5 7 11 13'
            solution:
              content: |
                def primes_up_to(n):
                    def is_prime(num):
                        if num < 2:
                            return False
                        for i in range(2, int(num ** 0.5) + 1):
                            if num % i == 0:
                                return False
                        return True
                    
                    for num in range(2, n + 1):
                        if is_prime(num):
                            yield num

                if __name__ == "__main__":
                    n = int(input())
                    print(" ".join(str(x) for x in primes_up_to(n)))

          - id: custom-iterator
            title: 'Custom String Iterator'
            description: |
              Implement a class `StringIterator` that iterates over the characters of a string, skipping any characters specified in a `skip` set.
              The class should implement the iterator protocol.
            complexity: medium
            points: 10
            time_limit_seconds: 10
            memory_limit_mb: 64
            input: |
              The first input is a string `s`.
              The second input is a string of characters to skip (each character is unique).
              Print the characters produced by the iterator, separated by spaces.
            input_constraints: |
              - 1 <= len(s) <= 100
              - 0 <= len(skip) <= 26
              - All characters in `s` and `skip` are lowercase letters.
            starter_code:
              content: |
                class StringIterator:
                    def __init__(self, s, skip):
                        self.s = s
                        self.skip = set(skip)
                        self.index = 0
                    
                    def __iter__(self):
                        # TODO: Return iterator object
                        pass
                    
                    def __next__(self):
                        # TODO: Return next valid character or raise StopIteration
                        pass

                if __name__ == "__main__":
                    s = input()
                    skip = input()
                    iterator = StringIterator(s, skip)
                    print(" ".join(iterator))
            test_cases:
              hidden: false
              visible_cases:
                - input: |
                    hello
                    lo
                  expected_output: 'h e'
                - input: |
                    python
                    p
                  expected_output: 'y t h o n'
              hidden: true
              hidden_cases:
                - input: |
                    abcde
                    bd
                  expected_output: 'a c e'
            solution:
              content: |
                class StringIterator:
                    def __init__(self, s, skip):
                        self.s = s
                        self.skip = set(skip)
                        self.index = 0
                    
                    def __iter__(self):
                        return self
                    
                    def __next__(self):
                        while self.index < len(self.s):
                            char = self.s[self.index]
                            self.index += 1
                            if char not in self.skip:
                                return char
                        raise StopIteration

                if __name__ == "__main__":
                    s = input()
                    skip = input()
                    iterator = StringIterator(s, skip)
                    print(" ".join(iterator))

          - id: generator-pipeline
            title: 'Generator Pipeline'
            description: |
              Implement a generator pipeline with two functions:
              - `square_numbers(n)`: Yields the squares of numbers from 1 to `n`.
              - `filter_even_squares(n)`: Yields only the even squares from `square_numbers(n)`.
              Print the even squares, separated by spaces.
            complexity: hard
            points: 15
            time_limit_seconds: 15
            memory_limit_mb: 128
            input: |
              The input is a single integer `n`, the upper bound for the range of numbers to square.
            input_constraints: |
              - 1 <= n <= 100
            starter_code:
              content: |
                def square_numbers(n):
                    # TODO: Yield squares of numbers from 1 to n
                    pass

                def filter_even_squares(n):
                    # TODO: Yield even squares from square_numbers
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    print(" ".join(str(x) for x in filter_even_squares(n)))
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '4 16'
                - input: '10'
                  expected_output: '4 16 36 64 100'
              hidden: true
              hidden_cases:
                - input: '7'
                  expected_output: '4 16 36'
            solution:
              content: |
                def square_numbers(n):
                    for i in range(1, n + 1):
                        yield i * i

                def filter_even_squares(n):
                    for square in square_numbers(n):
                        if square % 2 == 0:
                            yield square

                if __name__ == "__main__":
                    n = int(input())
                    print(" ".join(str(x) for x in filter_even_squares(n)))

          - id: permutation-generator
            title: 'Permutation Generator'
            description: |
              Implement a generator function `permutations(s)` that yields all possible permutations of the input string `s`.
              Each permutation should be yielded as a string.
              Print all permutations, one per line.
            complexity: hard
            points: 15
            time_limit_seconds: 15
            memory_limit_mb: 128
            input: |
              The input is a single string `s`.
            input_constraints: |
              - 1 <= len(s) <= 5
              - `s` contains only lowercase letters, with no duplicates.
            starter_code:
              content: |
                def permutations(s):
                    # TODO: Yield all permutations of the string
                    pass

                if __name__ == "__main__":
                    s = input()
                    for perm in permutations(s):
                        print(perm)
            test_cases:
              hidden: false
              visible_cases:
                - input: 'ab'
                  expected_output: |
                    ab
                    ba
                - input: 'abc'
                  expected_output: |
                    abc
                    acb
                    bac
                    bca
                    cab
                    cba
              hidden: true
              hidden_cases:
                - input: 'xy'
                  expected_output: |
                    xy
                    yx
            solution:
              content: |
                def permutations(s):
                    if len(s) <= 1:
                        yield s
                        return
                    for i in range(len(s)):
                        char = s[i]
                        rest = s[:i] + s[i+1:]
                        for sub_perm in permutations(rest):
                            yield char + sub_perm

                if __name__ == "__main__":
                    s = input()
                    for perm in permutations(s):
                        print(perm)

  - id: javascript-basics
    language: javascript
    title: JavaScript Fundamentals
    description: Learn JavaScript programming from scratch
    difficulty: beginner
    estimated_hours: 20
    prerequisites: []
    topics:
      - topic_id: Getting Started with JavaScript
        topic_title: JavaScript Basics
        short_description: >-
          Learn the foundations of JavaScript, including variables, data types, operators, and how to embed JavaScript into HTML. This module sets the stage for understanding how JavaScript interacts with web pages.
        order: 1
        questions:
          - id: js-print-hello
            title: 'Print Hello'
            description: Print "Hello, World!" to the console.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // Your code here

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'Hello, World!'
                  explanation: 'Should print Hello, World!'
              hidden: false
            solution:
              content: |2-
                console.log("Hello, World!");

          - id: js-add-two-numbers
            title: 'Add Two Numbers'
            description: Take two numbers from the user and print their sum.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // Read input and print sum
                function addNumbers(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '3 4'
                  expected_output: '7'
                  explanation: '3 + 4 = 7'
                - input: '10 15'
                  expected_output: '25'
              hidden: true
              hidden_cases:
                - input: '100 100'
                  expected_output: '200'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function addNumbers(a, b) {
                    console.log(Number(a) + Number(b));
                }

                rl.on('line', (input) => {
                    const [a, b] = input.trim().split(" ");
                    addNumbers(a, b);
                    rl.close();
                });

          - id: js-type-check
            title: 'Check Type of Variable'
            description: Print the type of a given variable.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function checkType(value) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '"hello"'
                  expected_output: 'string'
                - input: '42'
                  expected_output: 'number'
              hidden: true
              hidden_cases:
                - input: 'true'
                  expected_output: 'boolean'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function checkType(value) {
                    try {
                        // Safely evaluate the input to determine its type
                        const evaluated = eval(value);
                        console.log(typeof evaluated);
                    } catch (e) {
                        console.log('undefined'); // Handle invalid input
                    }
                }

                rl.on('line', (input) => {
                    checkType(input.trim());
                    rl.close();
                });

          - id: js-compare-numbers
            title: 'Compare Two Numbers'
            description: Compare two numbers and print which one is greater or if they are equal.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function compareNumbers(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5 3'
                  expected_output: '5 is greater'
                - input: '4 4'
                  expected_output: 'Both are equal'
              hidden: true
              hidden_cases:
                - input: '1 99'
                  expected_output: '99 is greater'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function compareNumbers(a, b) {
                    a = Number(a);
                    b = Number(b);
                    if (a > b) console.log(`${a} is greater`);
                    else if (b > a) console.log(`${b} is greater`);
                    else console.log("Both are equal");
                }

                rl.on('line', (input) => {
                    const [a, b] = input.trim().split(" ");
                    compareNumbers(a, b);
                    rl.close();
                });

          - id: js-swap-values
            title: 'Swap Two Variables Without Temp'
            description: Swap two values using arithmetic operations without using a third variable.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function swap(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '3 5'
                  expected_output: '5 3'
              hidden: true
              hidden_cases:
                - input: '10 20'
                  expected_output: '20 10'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function swap(a, b) {
                    a = Number(a);
                    b = Number(b);
                    a = a + b;
                    b = a - b;
                    a = a - b;
                    console.log(a + " " + b);
                }

                rl.on('line', (input) => {
                    const [a, b] = input.trim().split(" ");
                    swap(a, b);
                    rl.close();
                });

          - id: js-eval-expression-input
            title: 'Evaluate Expression from Input'
            description: >
              Take three inputs: a number, an operator as a string (`+`, `-`, `*`, `/`), and another number. 
              Based on the operator, perform the operation and print the result with its type. 
              This tests your understanding of input parsing, conditionals, and type evaluation in JavaScript.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // Read inputs from stdin and evaluate the expression
                // Input format (one per line):
                // number1
                // operator (+, -, *, /)
                // number2

                const readline = require('readline');
                const rl = readline.createInterface({
                  input: process.stdin,
                  output: process.stdout
                });

                let inputs = [];
                rl.on('line', (line) => {
                  inputs.push(line);
                  if (inputs.length === 3) {
                    // Process inputs here
                    
                    rl.close();
                  }
                });
            test_cases:
              hidden: false
              visible_cases:
                - input: |
                    10
                    +
                    5
                  expected_output: |
                    15 number
                  explanation: '10 + 5 = 15, and type is number'
                - input: |
                    8
                    /
                    2
                  expected_output: |
                    4 number
                  explanation: '8 / 2 = 4, and type is number'
            hidden: true
            solution:
              content: |2-
                const readline = require('readline');
                const rl = readline.createInterface({
                  input: process.stdin,
                  output: process.stdout
                });

                let inputs = [];
                rl.on('line', (line) => {
                  inputs.push(line);
                  if (inputs.length === 3) {
                    const a = Number(inputs[0]);
                    const op = inputs[1];
                    const b = Number(inputs[2]);

                    let result;
                    switch (op) {
                      case '+':
                        result = a + b;
                        break;
                      case '-':
                        result = a - b;
                        break;
                      case '*':
                        result = a * b;
                        break;
                      case '/':
                        result = a / b;
                        break;
                      default:
                        console.log("Invalid operator");
                        return;
                    }

                    console.log(result + " " + typeof result);
                    rl.close();
                  }
                });


      - topic_id: Making Decisions with JavaScript
        topic_title: Control Flow and Loops
        short_description: Work with arrays, objects, sets, and maps to manipulate and organize data efficiently.
        order: 2
        questions:
          - id: js-if-else-check
            title: 'Check Positive or Negative'
            description: Use if-else to check whether a number is positive, negative, or zero.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function checkSign(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: 'Positive'
                - input: '-3'
                  expected_output: 'Negative'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: 'Zero'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function checkSign(n) {
                    n = Number(n);
                    if (n > 0) console.log("Positive");
                    else if (n < 0) console.log("Negative");
                    else console.log("Zero");
                }

                rl.on('line', (input) => {
                    checkSign(input.trim());
                    rl.close();
                });

          - id: js-even-numbers-loop
            title: 'Print Even Numbers Up to N'
            description: Print all even numbers from 1 to N using a for loop.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function printEvens(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '6'
                  expected_output: '2 4 6'
              hidden: true
              hidden_cases:
                - input: '10'
                  expected_output: '2 4 6 8 10'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function printEvens(n) {
                    n = Number(n);
                    let result = [];
                    for (let i = 2; i <= n; i += 2) {
                        result.push(i);
                    }
                    console.log(result.join(" "));
                }

                rl.on('line', (input) => {
                    printEvens(input.trim());
                    rl.close();
                });
          - id: js-switch-day
            title: 'Day of the Week'
            description: Use switch-case to print the day of the week based on number input (1-7).
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function getDay(num) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '1'
                  expected_output: 'Monday'
                - input: '7'
                  expected_output: 'Sunday'
              hidden: true
              hidden_cases:
                - input: '4'
                  expected_output: 'Thursday'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function getDay(num) {
                    switch(Number(num)) {
                        case 1: console.log("Monday"); break;
                        case 2: console.log("Tuesday"); break;
                        case 3: console.log("Wednesday"); break;
                        case 4: console.log("Thursday"); break;
                        case 5: console.log("Friday"); break;
                        case 6: console.log("Saturday"); break;
                        case 7: console.log("Sunday"); break;
                        default: console.log("Invalid");
                    }
                }

                rl.on('line', (input) => {
                    getDay(input.trim());
                    rl.close();
                });

          - id: js-sum-of-digits
            title: 'Sum of Digits Using Loop'
            description: Calculate and print the sum of digits of a number using a while loop.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function sumOfDigits(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '123'
                  expected_output: '6'
                - input: '456'
                  expected_output: '15'
              hidden: true
              hidden_cases:
                - input: '789'
                  expected_output: '24'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function sumOfDigits(n) {
                    n = Number(n);
                    let sum = 0;
                    while (n > 0) {
                        sum += n % 10;
                        n = Math.floor(n / 10);
                    }
                    console.log(sum);
                }

                rl.on('line', (input) => {
                    sumOfDigits(input.trim());
                    rl.close();
                });

          - id: js-factorial-loop
            title: 'Factorial Using Loop'
            description: Compute the factorial of a number using a for loop.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function factorial(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '120'
              hidden: true
              hidden_cases:
                - input: '7'
                  expected_output: '5040'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function factorial(n) {
                    n = Number(n);
                    let fact = 1;
                    for (let i = 1; i <= n; i++) {
                        fact *= i;
                    }
                    console.log(fact);
                }

                rl.on('line', (input) => {
                    factorial(input.trim());
                    rl.close();
                });

          - id: js-reverse-number
            title: 'Reverse a Number'
            description: Reverse the digits of a number using loops.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function reverseNumber(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '1234'
                  expected_output: '4321'
              hidden: true
              hidden_cases:
                - input: '100'
                  expected_output: '1'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function reverseNumber(n) {
                    n = Number(n);
                    let rev = 0;
                    while (n > 0) {
                        rev = rev * 10 + (n % 10);
                        n = Math.floor(n / 10);
                    }
                    console.log(rev);
                }

                rl.on('line', (input) => {
                    reverseNumber(input.trim());
                    rl.close();
                });


      - topic_id: Reusable Code with Functions
        topic_title: Functions and Scope
        short_description: Explore how to control the flow of your programs using if, else, switch statements, and loops like for, while, and do...while. You'll learn how to write logical, dynamic programs that respond to different inputs.
        order: 3
        questions:
          - id: js-simple-function
            title: 'Greet the User'
            description: Create a function that takes a name and prints a greeting.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function greet(name) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: 'Alice'
                  expected_output: 'Hello, Alice!'
                - input: 'Bob'
                  expected_output: 'Hello, Bob!'
              hidden: true
              hidden_cases:
                - input: 'John'
                  expected_output: 'Hello, John!'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function greet(name) {
                    console.log(`Hello, ${name}!`);
                }

                rl.on('line', (input) => {
                    greet(input.trim());
                    rl.close();
                });

          - id: js-add-two-numbers
            title: 'Add Two Numbers Using a Function'
            description: Create a function that takes two numbers and returns their sum.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function addNumbers(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '3 5'
                  expected_output: '8'
                - input: '10 20'
                  expected_output: '30'
              hidden: true
              hidden_cases:
                - input: '100 200'
                  expected_output: '300'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function addNumbers(a, b) {
                    console.log(Number(a) + Number(b));
                }

                rl.on('line', (input) => {
                    const [a, b] = input.trim().split(' ');
                    addNumbers(a, b);
                    rl.close();
                });

          - id: js-function-scope-understanding
            title: 'Scope Understanding'
            description: >
              Take a number as input and define a function that attempts to change the value of a variable declared outside the function.
              Print the value of the variable both inside and outside the function to demonstrate scope behavior in JavaScript.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |-
                // Read one number from input
                // Demonstrate how function scope works in JavaScript
                
                const readline = require('readline');
                const rl = readline.createInterface({
                  input: process.stdin,
                  output: process.stdout
                });

                rl.question('', function(input) {
                  let num = Number(input);

                  // Your function definition and logic here

                  rl.close();
                });
            test_cases:
              hidden: false
              visible_cases:
                - input: '7'
                  expected_output: |
                    Inside function: 10
                    Outside function: 7
                  explanation: 'The function creates a local variable "num" that doesn’t affect the outer variable.'
              hidden: true
              hidden_cases:
                - input: '100'
                  expected_output: |
                    Inside function: 10
                    Outside function: 100
              solution:
                content: |-
                  const readline = require('readline');
                  const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                  });

                  rl.question('', function(input) {
                    let num = Number(input);

                    function modifyNum() {
                      let num = 10; // Local scope
                      console.log("Inside function: " + num);
                    }

                    modifyNum();
                    console.log("Outside function: " + num);

                    rl.close();
                  });


          - id: js-default-parameters
            title: 'Function with Default Parameters'
            description: Write a function with default parameters that multiplies two numbers.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function multiply(a, b = 2) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '4'
                  expected_output: '8'
                - input: '3 5'
                  expected_output: '15'
              hidden: true
              hidden_cases:
                - input: '7'
                  expected_output: '14'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function multiply(a, b = 2) {
                    console.log(Number(a) * Number(b));
                }

                rl.on('line', (input) => {
                    const args = input.trim().split(" ");
                    multiply(...args);
                    rl.close();
                });

          - id: js-recursive-factorial
            title: 'Recursive Factorial Function'
            description: Use recursion to find the factorial of a number.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function factorial(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '120'
              hidden: true
              hidden_cases:
                - input: '6'
                  expected_output: '720'
            solution:
              content: |2-
                const readline = require('readline');

                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                function factorial(n) {
                    n = Number(n);
                    if (n === 0) return 1;
                    return n * factorial(n - 1);
                }

                rl.on('line', (input) => {
                    console.log(factorial(input.trim()));
                    rl.close();
                });

          - id: js-closure-counter
            title: 'Closure Counter'
            description: Demonstrate closures by creating a counter function that remembers its state.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function createCounter() {
                    // Your code here
                }

                const counter = createCounter();
                console.log(counter()); // 1
                console.log(counter()); // 2

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '1\n2'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '1\n2'
            solution:
              content: |2-
                function createCounter() {
                    let count = 0;
                    return function () {
                        count += 1;
                        return count;
                    };
                }

                const counter = createCounter();
                console.log(counter());
                console.log(counter());

