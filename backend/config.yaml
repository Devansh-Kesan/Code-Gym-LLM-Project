title: Code Gym
description: A platform for practicing programming skills through structured exercises
version: 1.0.0
maintainer: your-email@example.com
languages:
  - id: python
    name: Python
    version: '3.12'
  - id: javascript
    name: JavaScript
    version: ES2022
courses:
  - id: python-course
    language: python
    title: Python Fundamentals
    description: Learn Python programming from scratch
    difficulty: beginner
    estimated_hours: 20
    prerequisites: []
    topics:
      - topic_id: Understanding Built-in Collections
        topic_title: Mastering Python Data Structures
        short_description: >-
          Learn how to store, retrieve, and manipulate data using Python's built-in structures like lists, tuples, sets, and dictionaries. These are essential tools for organizing and managing data effectively in any Python program.
        order: 1
        questions:
          - id: sum-of-list
            title: 'Sum of List Elements'
            description: Calculate and return the sum of all elements in a given list.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def sum_of_list(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    print(sum_of_list(nums))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 4 5'
                  expected_output: '15'
                  explanation: 'Sum = 1+2+3+4+5 = 15'
                - input: '10 20 30'
                  expected_output: '60'
                  explanation: 'Sum = 10+20+30 = 60'
              hidden: true
              hidden_cases:
                - input: '0 0 0'
                  expected_output: '0'
                - input: '100 -50 25'
                  expected_output: '75'
            solution:
              content: |2-
                def sum_of_list(lst):
                    return sum(lst)

                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    print(sum_of_list(nums))


          - id: count-unique-elements
            title: 'Count Unique Elements'
            description: Return the number of unique elements in a given list.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def count_unique(lst):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    print(count_unique(nums))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 2 3 4'
                  expected_output: '4'
                  explanation: 'Unique elements are 1, 2, 3, 4'
                - input: '5 5 5 5 5'
                  expected_output: '1'
                  explanation: 'Only one unique element: 5'
              hidden: true
              hidden_cases:
                - input: '1 1 2 2 3 3 4'
                  expected_output: '4'
                - input: '10 20 30 10 20'
                  expected_output: '3'
            solution:
              content: |2-
                def count_unique(lst):
                    return len(set(lst))
                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    print(count_unique(nums))


          - id: frequency-counter
            title: 'Frequency Counter'
            description: Return a dictionary with the frequency of each element in the list.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def get_frequency(lst):
                    # Your code here
                    pass
                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    freq_dict = get_frequency(nums)
                    for key in sorted(freq_dict.keys()):
                        print(f"{key}:{freq_dict[key]}")
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 2 3 3 3'
                  expected_output: |
                    1:1
                    2:2
                    3:3
                  explanation: 'Frequencies are 1:1, 2:2, 3:3'
                - input: '4 4 4 4'
                  expected_output: |
                    4:4
                  explanation: 'Only one unique element with frequency 4'
              hidden: true
              hidden_cases:
                - input: '5 6 5 6 5'
                  expected_output: |
                    5:3
                    6:2
                - input: '9 8 7 8 9 9'
                  expected_output: |
                    7:1
                    8:2
                    9:3
            solution:
              content: |2-
                def get_frequency(lst):
                    freq = {}
                    for num in lst:
                        freq[num] = freq.get(num, 0) + 1
                    return freq
                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    freq_dict = get_frequency(nums)
                    for key in sorted(freq_dict.keys()):
                        print(f"{key}:{freq_dict[key]}")


          - id: merge-and-sort
            title: 'Merge and Sort Two Lists'
            description: Merge two input lists and return a sorted list without duplicates.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def merge_and_sort_unique(lst1, lst2):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    list1 = list(map(int, input().split()))
                    list2 = list(map(int, input().split()))
                    result = merge_and_sort_unique(list1, list2)
                    print(*result)
            test_cases:
              hidden: false
              visible_cases:
                - input: |
                    1 3 5
                    2 3 6
                  expected_output: '1 2 3 5 6'
                  explanation: 'Merged and sorted without duplicates'
                - input: |
                    4 4 4
                    4 4 4
                  expected_output: '4'
                  explanation: 'All elements are the same, only one unique'
              hidden: true
              hidden_cases:
                - input: |
                    10 20 30
                    5 15 25
                  expected_output: '5 10 15 20 25 30'
                - input: |
                    7 9 11 13
                    8 10 12 14
                  expected_output: '7 8 9 10 11 12 13 14'
            solution:
              content: |2-
                def merge_and_sort_unique(lst1, lst2):
                    merged = list(set(lst1 + lst2))
                    merged.sort()
                    return merged

                if __name__ == "__main__":
                    list1 = list(map(int, input().split()))
                    list2 = list(map(int, input().split()))
                    result = merge_and_sort_unique(list1, list2)
                    print(*result)

          - id: longest-unique-subarray
            title: 'Longest Unique Subarray'
            description: Find the length of the longest contiguous subarray with all unique elements.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def longest_unique_subarray(arr):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    print(longest_unique_subarray(nums))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1 2 3 2 4 5'
                  expected_output: '4'
                  explanation: 'Longest unique subarray is [3,2,4,5]'
                - input: '5 5 5 5'
                  expected_output: '1'
                  explanation: 'Only one unique element'
              hidden: true
              hidden_cases:
                - input: '1 2 3 4 5 1 2'
                  expected_output: '5'
                - input: '10 20 10 30 40 50 30'
                  expected_output: '5'
            solution:
              content: |2-
                def longest_unique_subarray(arr):
                    seen = set()
                    left = 0
                    max_len = 0
                    for right in range(len(arr)):
                        while arr[right] in seen:
                            seen.remove(arr[left])
                            left += 1
                        seen.add(arr[right])
                        max_len = max(max_len, right - left + 1)
                    return max_len

                if __name__ == "__main__":
                    nums = list(map(int, input().split()))
                    print(longest_unique_subarray(nums))

          - id: flatten-nested-dictionary
            title: 'Flatten Nested Dictionary'
            description: Given a nested dictionary, flatten it into a single-level dictionary with keys representing the path.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def flatten_dict(d, parent_key='', sep='.'):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    import ast
                    d = ast.literal_eval(input())
                    result = flatten_dict(d)
                    for k in sorted(result):
                        print(f"{k}:{result[k]}")
            test_cases:
              hidden: false
              visible_cases:
                - input: "{'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}"
                  expected_output: |
                    a:1
                    b.c:2
                    b.d.e:3
                  explanation: 'Flattened keys represent path in nested dict'
                - input: "{'x': {'y': {'z': 5}}, 'w': 1}"
                  expected_output: |
                    w:1
                    x.y.z:5
                  explanation: 'All keys follow path structure with dots'
              hidden: true
              hidden_cases:
                - input: "{'foo': {'bar': 2}, 'baz': {'qux': {'quux': 4}}}"
                  expected_output: |
                    baz.qux.quux:4
                    foo.bar:2
                - input: "{'a': {'b': {'c': {'d': 9}}}}"
                  expected_output: |
                    a.b.c.d:9
            solution:
              content: |2-
                def flatten_dict(d, parent_key='', sep='.'):
                    items = {}
                    for k, v in d.items():
                        new_key = f"{parent_key}{sep}{k}" if parent_key else k
                        if isinstance(v, dict):
                            items.update(flatten_dict(v, new_key, sep=sep))
                        else:
                            items[new_key] = v
                    return items

                if __name__ == "__main__":
                    import ast
                    d = ast.literal_eval(input())
                    result = flatten_dict(d)
                    for k in sorted(result):
                        print(f"{k}:{result[k]}")

                              
      - topic_id: Decision Making and Loops in Python
        topic_title: Control Flow Made Easy
        short_description: Explore how to control the execution of your code using if-else statements, for and while loops. Gain practical skills by building logic-based mini projects like prime checkers and number games.
        order: 2
        questions:
          - id: number-type
            title: 'Positive, Negative or Zero'
            description: Determine if a number is positive, negative, or zero.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def check_number(n):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    num = int(input())
                    print(check_number(num))
            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: 'Positive'
                - input: '-3'
                  expected_output: 'Negative'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: 'Zero'
                - input: '-1'
                  expected_output: 'Negative'
            solution:
              content: |2-
                def check_number(n):
                    if n > 0:
                        return "Positive"
                    elif n < 0:
                        return "Negative"
                    else:
                        return "Zero"

                if __name__ == "__main__":
                    num = int(input())
                    print(check_number(num))

          - id: max-of-three
            title: 'Maximum of Three Numbers'
            description: Return the largest among three numbers using conditional statements.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def max_of_three(a, b, c):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    a, b, c = map(int, input().split())
                    print(max_of_three(a, b, c))
            test_cases:
              hidden: false
              visible_cases:
                - input: '10 20 30'
                  expected_output: '30'
                - input: '50 40 10'
                  expected_output: '50'
              hidden: true
              hidden_cases:
                - input: '1 1 1'
                  expected_output: '1'
                - input: '9 8 10'
                  expected_output: '10'
            solution:
              content: |2-
                def max_of_three(a, b, c):
                    if a >= b and a >= c:
                        return a
                    elif b >= a and b >= c:
                        return b
                    else:
                        return c

                if __name__ == "__main__":
                    a, b, c = map(int, input().split())
                    print(max_of_three(a, b, c))

          - id: grade-categorizer
            title: 'Grade Categorizer'
            description: Print the grade based on marks using if-elif-else conditions.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def get_grade(marks):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    marks = int(input())
                    print(get_grade(marks))
            test_cases:
              hidden: false
              visible_cases:
                - input: '85'
                  expected_output: 'A'
                - input: '65'
                  expected_output: 'C'
              hidden: true
              hidden_cases:
                - input: '72'
                  expected_output: 'B'
                - input: '33'
                  expected_output: 'F'
            solution:
              content: |2-
                def get_grade(marks):
                    if marks >= 80:
                        return "A"
                    elif marks >= 70:
                        return "B"
                    elif marks >= 60:
                        return "C"
                    elif marks >= 50:
                        return "D"
                    else:
                        return "F"

                if __name__ == "__main__":
                    marks = int(input())
                    print(get_grade(marks))


          - id: leap-year
            title: 'Leap Year Checker'
            description: Determine whether the given year is a leap year or not.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def is_leap_year(year):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    year = int(input())
                    print(is_leap_year(year))
            test_cases:
              hidden: false
              visible_cases:
                - input: '2000'
                  expected_output: 'Leap Year'
                - input: '1900'
                  expected_output: 'Not a Leap Year'
              hidden: true
              hidden_cases:
                - input: '2024'
                  expected_output: 'Leap Year'
                - input: '2100'
                  expected_output: 'Not a Leap Year'
            solution:
              content: |2-
                def is_leap_year(year):
                    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
                        return "Leap Year"
                    else:
                        return "Not a Leap Year"

                if __name__ == "__main__":
                    year = int(input())
                    print(is_leap_year(year))


          - id: triangle-type
            title: 'Triangle Type Checker'
            description: Classify a triangle as Equilateral, Isosceles, or Scalene based on side lengths.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def triangle_type(a, b, c):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    a, b, c = map(int, input().split())
                    print(triangle_type(a, b, c))
            test_cases:
              hidden: false
              visible_cases:
                - input: '3 3 3'
                  expected_output: 'Equilateral'
                - input: '3 3 4'
                  expected_output: 'Isosceles'
              hidden: true
              hidden_cases:
                - input: '3 4 5'
                  expected_output: 'Scalene'
                - input: '7 7 10'
                  expected_output: 'Isosceles'
            solution:
              content: |2-
                def triangle_type(a, b, c):
                    if a == b == c:
                        return "Equilateral"
                    elif a == b or b == c or a == c:
                        return "Isosceles"
                    else:
                        return "Scalene"

                if __name__ == "__main__":
                    a, b, c = map(int, input().split())
                    print(triangle_type(a, b, c))


          - id: atm-validator
            title: 'ATM Withdrawal Validator'
            description: Validate ATM withdrawal based on balance, withdrawal amount and minimum denomination.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def validate_withdrawal(balance, amount):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    balance, amount = map(int, input().split())
                    print(validate_withdrawal(balance, amount))
            test_cases:
              hidden: false
              visible_cases:
                - input: '1000 500'
                  expected_output: 'Transaction Successful'
                - input: '300 500'
                  expected_output: 'Insufficient Balance'
              hidden: true
              hidden_cases:
                - input: '1500 1250'
                  expected_output: 'Transaction Successful'
                - input: '2000 2451'
                  expected_output: 'Invalid Amount'
            solution:
              content: |2-
                def validate_withdrawal(balance, amount):
                    if amount > balance:
                        return "Insufficient Balance"
                    elif amount % 50 != 0:
                        return "Invalid Amount"
                    else:
                        return "Transaction Successful"

                if __name__ == "__main__":
                    balance, amount = map(int, input().split())
                    print(validate_withdrawal(balance, amount))

      - topic_id: Functions and Modular Programming
        topic_title: Writing Reusable Code with Functions
        short_description: Understand how to build reusable code with functions and tackle problems using recursion.
        order: 3
        questions:
        - id: greet-user
          title: 'Greet the User'
          description: Write a function that greets a user with "Hello, <name>!".
          complexity: easy
          points: 5
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def greet(name):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  user = input()
                  print(greet(user))
          test_cases:
            hidden: false
            visible_cases:
              - input: 'Alice'
                expected_output: 'Hello, Alice!'
              - input: 'Bob'
                expected_output: 'Hello, Bob!'
            hidden: true
            hidden_cases:
              - input: 'Charlie'
                expected_output: 'Hello, Charlie!'
          solution:
            content: |2-
              def greet(name):
                  return f"Hello, {name}!"

              if __name__ == "__main__":
                  user = input()
                  print(greet(user))

        - id: square-number
          title: 'Square of a Number'
          description: Write a function that returns the square of a given number.
          complexity: easy
          points: 5
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def square(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  num = int(input())
                  print(square(num))
          test_cases:
            hidden: false
            visible_cases:
              - input: '4'
                expected_output: '16'
              - input: '-3'
                expected_output: '9'
            hidden: true
            hidden_cases:
              - input: '0'
                expected_output: '0'
          solution:
            content: |2-
              def square(n):
                  return n * n

              if __name__ == "__main__":
                  num = int(input())
                  print(square(num))

        - id: is-prime
          title: 'Check Prime'
          description: Write a function that checks whether a number is prime.
          complexity: medium
          points: 10
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def is_prime(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  num = int(input())
                  print(is_prime(num))
          test_cases:
            hidden: false
            visible_cases:
              - input: '7'
                expected_output: 'True'
              - input: '4'
                expected_output: 'False'
            hidden: true
            hidden_cases:
              - input: '17'
                expected_output: 'True'
              - input: '1'
                expected_output: 'False'
          solution:
            content: |2-
              def is_prime(n):
                  if n <= 1:
                      return False
                  for i in range(2, int(n**0.5)+1):
                      if n % i == 0:
                          return False
                  return True

              if __name__ == "__main__":
                  num = int(input())
                  print(is_prime(num))

        - id: factorial-func
          title: 'Factorial Function'
          description: Write a function that calculates the factorial of a given number using recursion.
          complexity: medium
          points: 10
          time_limit_seconds: 5
          memory_limit_mb: 64
          starter_code:
            content: |2-
              def factorial(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  num = int(input())
                  print(factorial(num))
          test_cases:
            hidden: false
            visible_cases:
              - input: '5'
                expected_output: '120'
              - input: '0'
                expected_output: '1'
            hidden: true
            hidden_cases:
              - input: '3'
                expected_output: '6'
          solution:
            content: |2-
              def factorial(n):
                  if n == 0 or n == 1:
                      return 1
                  return n * factorial(n - 1)

              if __name__ == "__main__":
                  num = int(input())
                  print(factorial(num))

        - id: fibonacci-series
          title: 'Fibonacci Series Generator'
          description: Generate the first n numbers of the Fibonacci series using a function.
          complexity: hard
          points: 15
          time_limit_seconds: 10
          memory_limit_mb: 128
          starter_code:
            content: |2-
              def fibonacci(n):
                  # Your code here
                  pass

              if __name__ == "__main__":
                  num = int(input())
                  print(fibonacci(num))
          test_cases:
            hidden: false
            visible_cases:
              - input: '5'
                expected_output: '[0, 1, 1, 2, 3]'
              - input: '1'
                expected_output: '[0]'
            hidden: true
            hidden_cases:
              - input: '7'
                expected_output: '[0, 1, 1, 2, 3, 5, 8]'
          solution:
            content: |2-
              def fibonacci(n):
                  fib = [0, 1]
                  while len(fib) < n:
                      fib.append(fib[-1] + fib[-2])
                  return fib[:n]

              if __name__ == "__main__":
                  num = int(input())
                  print(fibonacci(num))

        - id: calculator
          title: 'Simple Calculator using Functions'
          description: Implement a basic calculator using functions for add, subtract, multiply, divide.
          complexity: hard
          points: 15
          time_limit_seconds: 10
          memory_limit_mb: 128
          starter_code:
            content: |2-
              def add(a, b): pass
              def subtract(a, b): pass
              def multiply(a, b): pass
              def divide(a, b): pass

              if __name__ == "__main__":
                  a, b, op = input().split()
                  a, b = int(a), int(b)
                  # Call appropriate function based on op
          test_cases:
            hidden: false
            visible_cases:
              - input: '5 3 add'
                expected_output: '8'
              - input: '10 2 divide'
                expected_output: '5.0'
            hidden: true
            hidden_cases:
              - input: '4 5 multiply'
                expected_output: '20'
              - input: '9 3 subtract'
                expected_output: '6'
          solution:
            content: |2-
              def add(a, b): return a + b
              def subtract(a, b): return a - b
              def multiply(a, b): return a * b
              def divide(a, b): return a / b

              if __name__ == "__main__":
                  a, b, op = input().split()
                  a, b = int(a), int(b)
                  if op == 'add':
                      print(add(a, b))
                  elif op == 'subtract':
                      print(subtract(a, b))
                  elif op == 'multiply':
                      print(multiply(a, b))
                  elif op == 'divide':
                      print(divide(a, b))

  
      - topic_id: Working with Text Files and Data Storage
        topic_title: File Handling in Python
        short_description: Learn to structure Python code with classes, objects, and inheritance to build modular programs.
        order: 4
        questions:
          - id: read-text-file
            title: 'Read a Text File'
            description: Read a file and print its content line by line.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def read_file(filename):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    filename = input()
                    read_file(filename)
            test_cases:
              hidden: false
              visible_cases:
                - input: 'sample1.txt'
                  expected_output: "Hello World\nWelcome to Python\n"
              hidden: true
              hidden_cases:
                - input: 'hidden1.txt'
                  expected_output: "Hidden file content line 1\nHidden file content line 2\n"
            solution:
              content: |2-
                def read_file(filename):
                    with open(filename, 'r') as f:
                        for line in f:
                            print(line.strip())

                if __name__ == "__main__":
                    filename = input()
                    read_file(filename)

          - id: write-to-file
            title: 'Write to a File'
            description: Take a string input and write it into a file.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def write_file(filename, content):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    filename = input()
                    content = input()
                    write_file(filename, content)
            test_cases:
              hidden: false
              visible_cases:
                - input: "output1.txt\nHello Python"
                  expected_output: ""
              hidden: true
              hidden_cases:
                - input: "out.txt\nAnother line"
                  expected_output: ""
            solution:
              content: |2-
                def write_file(filename, content):
                    with open(filename, 'w') as f:
                        f.write(content)

                if __name__ == "__main__":
                    filename = input()
                    content = input()
                    write_file(filename, content)

          - id: count-lines
            title: 'Count Lines in a File'
            description: Write a function to count the number of lines in a given file.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def count_lines(filename):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    file = input()
                    print(count_lines(file))
            test_cases:
              hidden: false
              visible_cases:
                - input: 'sample2.txt'
                  expected_output: '3'
              hidden: true
              hidden_cases:
                - input: 'file3.txt'
                  expected_output: '5'
            solution:
              content: |2-
                def count_lines(filename):
                    with open(filename, 'r') as f:
                        return len(f.readlines())

                if __name__ == "__main__":
                    file = input()
                    print(count_lines(file))

          - id: append-to-file
            title: 'Append Text to File'
            description: Write a function to append a line to an existing file.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                def append_to_file(filename, text):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    name = input()
                    line = input()
                    append_to_file(name, line)
            test_cases:
              hidden: false
              visible_cases:
                - input: "sample3.txt\nAppended line"
                  expected_output: ""
              hidden: true
              hidden_cases:
                - input: "myfile.txt\nNew content"
                  expected_output: ""
            solution:
              content: |2-
                def append_to_file(filename, text):
                    with open(filename, 'a') as f:
                        f.write(text + "\n")

                if __name__ == "__main__":
                    name = input()
                    line = input()
                    append_to_file(name, line)

          - id: word-frequency
            title: 'Word Frequency Counter'
            description: Count the frequency of each word in a file.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def word_frequency(filename):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    fname = input()
                    word_frequency(fname)
            test_cases:
              hidden: false
              visible_cases:
                - input: 'sample4.txt'
                  expected_output: 'hello: 2\npython: 1\nworld: 1'
              hidden: true
              hidden_cases:
                - input: 'file5.txt'
                  expected_output: 'data: 3\nscience: 2\npython: 1'
            solution:
              content: |2-
                def word_frequency(filename):
                    freq = {}
                    with open(filename, 'r') as f:
                        for line in f:
                            words = line.strip().lower().split()
                            for word in words:
                                freq[word] = freq.get(word, 0) + 1
                    for k in sorted(freq):
                        print(f"{k}: {freq[k]}")

                if __name__ == "__main__":
                    fname = input()
                    word_frequency(fname)

          - id: merge-files
            title: 'Merge Two Files'
            description: Merge contents of two text files into a third file.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                def merge_files(file1, file2, output):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    f1 = input()
                    f2 = input()
                    fout = input()
                    merge_files(f1, f2, fout)
            test_cases:
              hidden: false
              visible_cases:
                - input: "f1.txt\nf2.txt\nfout.txt"
                  expected_output: ""
              hidden: true
              hidden_cases:
                - input: "alpha.txt\nbeta.txt\ngamma.txt"
                  expected_output: ""
            solution:
              content: |2-
                def merge_files(file1, file2, output):
                    with open(output, 'w') as out:
                        with open(file1, 'r') as f1:
                            out.write(f1.read())
                        with open(file2, 'r') as f2:
                            out.write(f2.read())

                if __name__ == "__main__":
                    f1 = input()
                    f2 = input()
                    fout = input()
                    merge_files(f1, f2, fout)

      - topic_id: Object-Oriented Programming Concepts
        topic_title: Getting Started with OOP in Python
        short_description: Solve classic algorithmic challenges to boost logical thinking and coding fluency.
        order: 5
        questions:
          - id: class-rectangle
            title: 'Rectangle Class'
            description: Create a class `Rectangle` with methods to compute area and perimeter.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Rectangle:
                    # Your code here
                    pass

                if __name__ == "__main__":
                    l = int(input())
                    b = int(input())
                    rect = Rectangle(l, b)
                    print(rect.area())
                    print(rect.perimeter())
            test_cases:
              hidden: false
              visible_cases:
                - input: "4\n5"
                  expected_output: "20\n18"
              hidden: true
              hidden_cases:
                - input: "7\n3"
                  expected_output: "21\n20"
            solution:
              content: |2-
                class Rectangle:
                    def __init__(self, length, breadth):
                        self.length = length
                        self.breadth = breadth

                    def area(self):
                        return self.length * self.breadth

                    def perimeter(self):
                        return 2 * (self.length + self.breadth)

                if __name__ == "__main__":
                    l = int(input())
                    b = int(input())
                    rect = Rectangle(l, b)
                    print(rect.area())
                    print(rect.perimeter())

          - id: class-student
            title: 'Student Class'
            description: Create a `Student` class with name, age, and marks attributes.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Student:
                    # Your code here
                    pass

                if __name__ == "__main__":
                    name = input()
                    age = int(input())
                    marks = float(input())
                    s = Student(name, age, marks)
                    print(s.name)
                    print(s.age)
                    print(s.marks)
            test_cases:
              hidden: false
              visible_cases:
                - input: "Alice\n20\n89.5"
                  expected_output: "Alice\n20\n89.5"
              hidden: true
              hidden_cases:
                - input: "Bob\n22\n75.0"
                  expected_output: "Bob\n22\n75.0"
            solution:
              content: |2-
                class Student:
                    def __init__(self, name, age, marks):
                        self.name = name
                        self.age = age
                        self.marks = marks

                if __name__ == "__main__":
                    name = input()
                    age = int(input())
                    marks = float(input())
                    s = Student(name, age, marks)
                    print(s.name)
                    print(s.age)
                    print(s.marks)

          - id: inheritance-animal
            title: 'Inheritance - Animal Sounds'
            description: Implement inheritance where `Dog` and `Cat` inherit from `Animal` class.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class Animal:
                    # Your code here
                    pass

                class Dog(Animal):
                    pass

                class Cat(Animal):
                    pass

                if __name__ == "__main__":
                    d = Dog()
                    c = Cat()
                    d.sound()
                    c.sound()
            test_cases:
              hidden: false
              visible_cases:
                - input: ""
                  expected_output: "Bark\nMeow"
              hidden: true
              hidden_cases:
                - input: ""
                  expected_output: "Bark\nMeow"
            solution:
              content: |2-
                class Animal:
                    def sound(self):
                        print("Animal sound")

                class Dog(Animal):
                    def sound(self):
                        print("Bark")

                class Cat(Animal):
                    def sound(self):
                        print("Meow")

                if __name__ == "__main__":
                    d = Dog()
                    c = Cat()
                    d.sound()
                    c.sound()

          - id: bank-account
            title: 'Bank Account Class'
            description: Create a `BankAccount` class with deposit and withdraw methods.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                class BankAccount:
                    # Your code here
                    pass

                if __name__ == "__main__":
                    acc = BankAccount(1000)
                    acc.deposit(500)
                    acc.withdraw(300)
                    print(acc.balance)
            test_cases:
              hidden: false
              visible_cases:
                - input: ""
                  expected_output: "1200"
              hidden: true
              hidden_cases:
                - input: ""
                  expected_output: "700"
            solution:
              content: |2-
                class BankAccount:
                    def __init__(self, balance):
                        self.balance = balance

                    def deposit(self, amount):
                        self.balance += amount

                    def withdraw(self, amount):
                        self.balance -= amount

                if __name__ == "__main__":
                    acc = BankAccount(1000)
                    acc.deposit(500)
                    acc.withdraw(300)
                    print(acc.balance)

          - id: polymorphism-shape
            title: 'Polymorphism - Shape Area'
            description: Demonstrate polymorphism using a base `Shape` class and derived `Circle`, `Square` classes.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                class Shape:
                    def area(self):
                        pass

                class Circle(Shape):
                    # Your code here
                    pass

                class Square(Shape):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    c = Circle(5)
                    s = Square(4)
                    print(c.area())
                    print(s.area())
            test_cases:
              hidden: false
              visible_cases:
                - input: ""
                  expected_output: "78.5\n16"
              hidden: true
              hidden_cases:
                - input: ""
                  expected_output: "50.24\n25"
            solution:
              content: |2-
                class Shape:
                    def area(self):
                        pass

                class Circle(Shape):
                    def __init__(self, radius):
                        self.radius = radius

                    def area(self):
                        return round(3.14 * self.radius ** 2, 2)

                class Square(Shape):
                    def __init__(self, side):
                        self.side = side

                    def area(self):
                        return self.side ** 2

                if __name__ == "__main__":
                    c = Circle(5)
                    s = Square(4)
                    print(c.area())
                    print(s.area())

          - id: employee-management
            title: 'Employee Management System'
            description: Create a class to manage multiple employees and display their details.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                class Employee:
                    # Your code here
                    pass

                def show_employees(employees):
                    # Your code here
                    pass

                if __name__ == "__main__":
                    n = int(input())
                    employees = []
                    for _ in range(n):
                        name = input()
                        salary = int(input())
                        employees.append(Employee(name, salary))
                    show_employees(employees)
            test_cases:
              hidden: false
              visible_cases:
                - input: "2\nJohn\n3000\nJane\n4000"
                  expected_output: "John: 3000\nJane: 4000"
              hidden: true
              hidden_cases:
                - input: "3\nAva\n5000\nTom\n4500\nMia\n3900"
                  expected_output: "Ava: 5000\nTom: 4500\nMia: 3900"
            solution:
              content: |2-
                class Employee:
                    def __init__(self, name, salary):
                        self.name = name
                        self.salary = salary

                def show_employees(employees):
                    for emp in employees:
                        print(f"{emp.name}: {emp.salary}")

                if __name__ == "__main__":
                    n = int(input())
                    employees = []
                    for _ in range(n):
                        name = input()
                        salary = int(input())
                        employees.append(Employee(name, salary))
                    show_employees(employees)


  - id: javascript-basics
    language: javascript
    title: JavaScript Fundamentals
    description: Learn JavaScript programming from scratch
    difficulty: beginner
    estimated_hours: 20
    prerequisites: []
    topics:
      - topic_id: Getting Started with JavaScript
        topic_title: JavaScript Basics
        short_description: >-
          Learn the foundations of JavaScript, including variables, data types, operators, and how to embed JavaScript into HTML. This module sets the stage for understanding how JavaScript interacts with web pages.
        order: 1
        questions:
          - id: js-print-hello
            title: 'Print Hello'
            description: Print "Hello, World!" to the console.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // Your code here

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'Hello, World!'
                  explanation: 'Should print Hello, World!'
              hidden: false
            solution:
              content: |2-
                console.log("Hello, World!");

          - id: js-add-two-numbers
            title: 'Add Two Numbers'
            description: Take two numbers from the user and print their sum.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // Read input and print sum
                function addNumbers(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '3 4'
                  expected_output: '7'
                  explanation: '3 + 4 = 7'
                - input: '10 15'
                  expected_output: '25'
              hidden: true
              hidden_cases:
                - input: '100 100'
                  expected_output: '200'
            solution:
              content: |2-
                function addNumbers(a, b) {
                    console.log(Number(a) + Number(b));
                }
                const input = prompt().split(" ");
                addNumbers(input[0], input[1]);

          - id: js-type-check
            title: 'Check Type of Variable'
            description: Print the type of a given variable.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function checkType(value) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '"hello"'
                  expected_output: 'string'
                - input: '42'
                  expected_output: 'number'
              hidden: true
              hidden_cases:
                - input: 'true'
                  expected_output: 'boolean'
            solution:
              content: |2-
                function checkType(value) {
                    console.log(typeof eval(value));
                }
                const input = prompt();
                checkType(input);

          - id: js-compare-numbers
            title: 'Compare Two Numbers'
            description: Compare two numbers and print which one is greater or if they are equal.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function compareNumbers(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5 3'
                  expected_output: '5 is greater'
                - input: '4 4'
                  expected_output: 'Both are equal'
              hidden: true
              hidden_cases:
                - input: '1 99'
                  expected_output: '99 is greater'
            solution:
              content: |2-
                function compareNumbers(a, b) {
                    a = Number(a);
                    b = Number(b);
                    if (a > b) console.log(`${a} is greater`);
                    else if (b > a) console.log(`${b} is greater`);
                    else console.log("Both are equal");
                }
                const input = prompt().split(" ");
                compareNumbers(input[0], input[1]);

          - id: js-swap-values
            title: 'Swap Two Variables Without Temp'
            description: Swap two values using arithmetic operations without using a third variable.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function swap(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '3 5'
                  expected_output: '5 3'
              hidden: true
              hidden_cases:
                - input: '10 20'
                  expected_output: '20 10'
            solution:
              content: |2-
                function swap(a, b) {
                    a = Number(a);
                    b = Number(b);
                    a = a + b;
                    b = a - b;
                    a = a - b;
                    console.log(a + " " + b);
                }
                const input = prompt().split(" ");
                swap(input[0], input[1]);

          - id: js-multiple-declarations
            title: 'Multiple Variable Declarations'
            description: Declare multiple variables and assign them different types, then print their values and types.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // Declare variables of different types and print their values and types

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: |
                    5 number
                    hello string
                    true boolean
                  explanation: 'Variables with different types should be declared and printed.'
              hidden: true
            solution:
              content: |2-
                let a = 5;
                let b = "hello";
                let c = true;
                console.log(a + " " + typeof a);
                console.log(b + " " + typeof b);
                console.log(c + " " + typeof c);


      - topic_id: Making Decisions with JavaScript
        topic_title: Control Flow and Loops
        short_description: Work with arrays, objects, sets, and maps to manipulate and organize data efficiently.
        order: 2
        questions:
          - id: js-if-else-check
            title: 'Check Positive or Negative'
            description: Use if-else to check whether a number is positive, negative, or zero.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function checkSign(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: 'Positive'
                - input: '-3'
                  expected_output: 'Negative'
              hidden: true
              hidden_cases:
                - input: '0'
                  expected_output: 'Zero'
            solution:
              content: |2-
                function checkSign(n) {
                    n = Number(n);
                    if (n > 0) console.log("Positive");
                    else if (n < 0) console.log("Negative");
                    else console.log("Zero");
                }
                const input = prompt();
                checkSign(input);

          - id: js-even-numbers-loop
            title: 'Print Even Numbers Up to N'
            description: Print all even numbers from 1 to N using a for loop.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function printEvens(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '6'
                  expected_output: '2 4 6'
              hidden: true
              hidden_cases:
                - input: '10'
                  expected_output: '2 4 6 8 10'
            solution:
              content: |2-
                function printEvens(n) {
                    n = Number(n);
                    let result = [];
                    for (let i = 2; i <= n; i += 2) {
                        result.push(i);
                    }
                    console.log(result.join(" "));
                }
                const input = prompt();
                printEvens(input);

          - id: js-switch-day
            title: 'Day of the Week'
            description: Use switch-case to print the day of the week based on number input (1-7).
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function getDay(num) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '1'
                  expected_output: 'Monday'
                - input: '7'
                  expected_output: 'Sunday'
              hidden: true
              hidden_cases:
                - input: '4'
                  expected_output: 'Thursday'
            solution:
              content: |2-
                function getDay(num) {
                    switch(Number(num)) {
                        case 1: console.log("Monday"); break;
                        case 2: console.log("Tuesday"); break;
                        case 3: console.log("Wednesday"); break;
                        case 4: console.log("Thursday"); break;
                        case 5: console.log("Friday"); break;
                        case 6: console.log("Saturday"); break;
                        case 7: console.log("Sunday"); break;
                        default: console.log("Invalid");
                    }
                }
                const input = prompt();
                getDay(input);

          - id: js-sum-of-digits
            title: 'Sum of Digits Using Loop'
            description: Calculate and print the sum of digits of a number using a while loop.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function sumOfDigits(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '123'
                  expected_output: '6'
                - input: '456'
                  expected_output: '15'
              hidden: true
              hidden_cases:
                - input: '789'
                  expected_output: '24'
            solution:
              content: |2-
                function sumOfDigits(n) {
                    n = Number(n);
                    let sum = 0;
                    while (n > 0) {
                        sum += n % 10;
                        n = Math.floor(n / 10);
                    }
                    console.log(sum);
                }
                const input = prompt();
                sumOfDigits(input);

          - id: js-factorial-loop
            title: 'Factorial Using Loop'
            description: Compute the factorial of a number using a for loop.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function factorial(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '120'
              hidden: true
              hidden_cases:
                - input: '7'
                  expected_output: '5040'
            solution:
              content: |2-
                function factorial(n) {
                    n = Number(n);
                    let fact = 1;
                    for (let i = 1; i <= n; i++) {
                        fact *= i;
                    }
                    console.log(fact);
                }
                const input = prompt();
                factorial(input);

          - id: js-reverse-number
            title: 'Reverse a Number'
            description: Reverse the digits of a number using loops.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function reverseNumber(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '1234'
                  expected_output: '4321'
              hidden: true
              hidden_cases:
                - input: '100'
                  expected_output: '1'
            solution:
              content: |2-
                function reverseNumber(n) {
                    n = Number(n);
                    let rev = 0;
                    while (n > 0) {
                        rev = rev * 10 + (n % 10);
                        n = Math.floor(n / 10);
                    }
                    console.log(rev);
                }
                const input = prompt();
                reverseNumber(input);


      - topic_id: Reusable Code with Functions
        topic_title: Functions and Scope
        short_description: Explore how to control the flow of your programs using if, else, switch statements, and loops like for, while, and do...while. You'll learn how to write logical, dynamic programs that respond to different inputs.
        order: 3
        questions:
          - id: js-simple-function
            title: 'Greet the User'
            description: Create a function that takes a name and prints a greeting.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function greet(name) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: 'Alice'
                  expected_output: 'Hello, Alice!'
                - input: 'Bob'
                  expected_output: 'Hello, Bob!'
              hidden: true
              hidden_cases:
                - input: 'John'
                  expected_output: 'Hello, John!'
            solution:
              content: |2-
                function greet(name) {
                    console.log(`Hello, ${name}!`);
                }
                const input = prompt();
                greet(input);

          - id: js-add-two-numbers
            title: 'Add Two Numbers Using a Function'
            description: Create a function that takes two numbers and returns their sum.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function addNumbers(a, b) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '3 5'
                  expected_output: '8'
                - input: '10 20'
                  expected_output: '30'
              hidden: true
              hidden_cases:
                - input: '100 200'
                  expected_output: '300'
            solution:
              content: |2-
                function addNumbers(a, b) {
                    console.log(Number(a) + Number(b));
                }
                const [a, b] = prompt().split(' ');
                addNumbers(a, b);

          - id: js-function-scope
            title: 'Function Scope Check'
            description: Demonstrate variable scope inside and outside of a function.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                let x = 5;

                function changeX() {
                    // Your code here
                }

                // Output x here

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '5'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '5'
            solution:
              content: |2-
                let x = 5;

                function changeX() {
                    let x = 10;
                }

                changeX();
                console.log(x);

          - id: js-default-parameters
            title: 'Function with Default Parameters'
            description: Write a function with default parameters that multiplies two numbers.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function multiply(a, b = 2) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '4'
                  expected_output: '8'
                - input: '3 5'
                  expected_output: '15'
              hidden: true
              hidden_cases:
                - input: '7'
                  expected_output: '14'
            solution:
              content: |2-
                function multiply(a, b = 2) {
                    console.log(Number(a) * Number(b));
                }
                const input = prompt().split(" ");
                multiply(...input);

          - id: js-recursive-factorial
            title: 'Recursive Factorial Function'
            description: Use recursion to find the factorial of a number.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function factorial(n) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '5'
                  expected_output: '120'
              hidden: true
              hidden_cases:
                - input: '6'
                  expected_output: '720'
            solution:
              content: |2-
                function factorial(n) {
                    n = Number(n);
                    if (n === 0) return 1;
                    return n * factorial(n - 1);
                }
                const input = prompt();
                console.log(factorial(input));

          - id: js-closure-counter
            title: 'Closure Counter'
            description: Demonstrate closures by creating a counter function that remembers its state.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function createCounter() {
                    // Your code here
                }

                const counter = createCounter();
                console.log(counter()); // 1
                console.log(counter()); // 2

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '1\n2'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '1\n2'
            solution:
              content: |2-
                function createCounter() {
                    let count = 0;
                    return function () {
                        count += 1;
                        return count;
                    };
                }

                const counter = createCounter();
                console.log(counter());
                console.log(counter());

      - topic_id: Interacting with Web Pages
        topic_title: DOM Manipulation
        short_description: Explore JavaScript arrays and their powerful built-in methods to manipulate and process data effectively.
        order: 4
        questions:
          - id: js-change-text
            title: 'Change Text of an Element'
            description: Select a paragraph by ID and change its text content.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // HTML
                // <p id="message">Hello</p>

                // JavaScript
                function updateText() {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '<p id="message">Welcome!</p>'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '<p id="message">Welcome!</p>'
            solution:
              content: |2-
                function updateText() {
                    document.getElementById('message').textContent = 'Welcome!';
                }
                updateText();

          - id: js-toggle-class
            title: 'Toggle a Class on Click'
            description: Toggle a class "active" on a button when it's clicked.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // HTML
                // <button id="myButton">Click me</button>

                // JavaScript
                function setupButton() {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'Class toggled on click'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: 'Class toggled on click'
            solution:
              content: |2-
                function setupButton() {
                    const btn = document.getElementById('myButton');
                    btn.addEventListener('click', () => {
                        btn.classList.toggle('active');
                    });
                }
                setupButton();

          - id: js-create-element
            title: 'Create and Append Element'
            description: Create a new list item and append it to an unordered list.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // HTML
                // <ul id="myList"></ul>

                // JavaScript
                function addListItem() {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '<li>New Item</li> added'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '<li>New Item</li> added'
            solution:
              content: |2-
                function addListItem() {
                    const ul = document.getElementById('myList');
                    const li = document.createElement('li');
                    li.textContent = 'New Item';
                    ul.appendChild(li);
                }
                addListItem();

          - id: js-form-input
            title: 'Get Input Value and Display'
            description: Read user input from a text box and display it in a paragraph.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // HTML
                // <input type="text" id="username" />
                // <p id="output"></p>

                // JavaScript
                function showUsername() {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: 'Alex'
                  expected_output: '<p id="output">Alex</p>'
              hidden: true
              hidden_cases:
                - input: 'Jamie'
                  expected_output: '<p id="output">Jamie</p>'
            solution:
              content: |2-
                function showUsername() {
                    const name = document.getElementById('username').value;
                    document.getElementById('output').textContent = name;
                }

          - id: js-delete-element
            title: 'Remove an Element from DOM'
            description: Remove a specific div from the DOM using JavaScript.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // HTML
                // <div id="toRemove">This will be removed</div>

                // JavaScript
                function removeDiv() {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'Element removed'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: 'Element removed'
            solution:
              content: |2-
                function removeDiv() {
                    const el = document.getElementById('toRemove');
                    el.parentNode.removeChild(el);
                }
                removeDiv();

          - id: js-dynamic-table
            title: 'Generate Table from Array'
            description: Create a table and populate rows from a given array of objects.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                // HTML
                // <table id="dataTable"><tbody></tbody></table>

                // JavaScript
                function populateTable(data) {
                    // Your code here
                }

            test_cases:
              hidden: false
              visible_cases:
                - input: '[{"name": "Alice"}, {"name": "Bob"}]'
                  expected_output: '<tr><td>Alice</td></tr><tr><td>Bob</td></tr>'
              hidden: true
              hidden_cases:
                - input: '[{"name": "John"}]'
                  expected_output: '<tr><td>John</td></tr>'
            solution:
              content: |2-
                function populateTable(data) {
                    const tbody = document.getElementById('dataTable').querySelector('tbody');
                    data.forEach(entry => {
                        const tr = document.createElement('tr');
                        const td = document.createElement('td');
                        td.textContent = entry.name;
                        tr.appendChild(td);
                        tbody.appendChild(tr);
                    });
                }

                const input = prompt();
                const parsed = JSON.parse(input);
                populateTable(parsed);

      - topic_id: Managing Data Structures in JavaScript
        topic_title: Objects and Arrays
        short_description: Dive deeper into JavaScript array manipulation with advanced methods and techniques.
        order: 6
        questions:
          - id: js-access-object
            title: 'Access Object Properties'
            description: Access and print a specific property of an object.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                const person = {
                  name: "Alice",
                  age: 25,
                  city: "New York"
                };

                function getName(obj) {
                  // Your code here
                }

                console.log(getName(person));

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: 'Alice'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: 'Alice'
            solution:
              content: |2-
                function getName(obj) {
                  return obj.name;
                }

          - id: js-array-push
            title: 'Add Element to Array'
            description: Push an element into an array and return the updated array.
            complexity: easy
            points: 5
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function addItem(arr, item) {
                  // Your code here
                }

                const myArr = [1, 2, 3];
                console.log(addItem(myArr, 4));

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '[1,2,3,4]'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '[1,2,3,4]'
            solution:
              content: |2-
                function addItem(arr, item) {
                  arr.push(item);
                  return arr;
                }

          - id: js-merge-objects
            title: 'Merge Two Objects'
            description: Merge two JavaScript objects and return the result.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function mergeObjects(obj1, obj2) {
                  // Your code here
                }

                const o1 = { a: 1, b: 2 };
                const o2 = { b: 3, c: 4 };
                console.log(mergeObjects(o1, o2));

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '{"a":1,"b":3,"c":4}'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '{"a":1,"b":3,"c":4}'
            solution:
              content: |2-
                function mergeObjects(obj1, obj2) {
                  return { ...obj1, ...obj2 };
                }

          - id: js-filter-array
            title: 'Filter Array of Numbers'
            description: Return an array containing only even numbers.
            complexity: medium
            points: 10
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                function filterEven(arr) {
                  // Your code here
                }

                console.log(filterEven([1, 2, 3, 4, 5, 6]));

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '[2,4,6]'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '[2,4,6]'
            solution:
              content: |2-
                function filterEven(arr) {
                  return arr.filter(num => num % 2 === 0);
                }

          - id: js-nested-object-access
            title: 'Access Nested Object'
            description: Access a deeply nested property in an object.
            complexity: hard
            points: 15
            time_limit_seconds: 5
            memory_limit_mb: 64
            starter_code:
              content: |2-
                const user = {
                  name: "John",
                  address: {
                    city: "LA",
                    geo: {
                      lat: 34.05,
                      lng: -118.25
                    }
                  }
                };

                function getLatitude(obj) {
                  // Your code here
                }

                console.log(getLatitude(user));

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '34.05'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '34.05'
            solution:
              content: |2-
                function getLatitude(obj) {
                  return obj.address.geo.lat;
                }

          - id: js-group-by-property
            title: 'Group Objects by Property'
            description: Group an array of objects by a specified key.
            complexity: hard
            points: 15
            time_limit_seconds: 10
            memory_limit_mb: 128
            starter_code:
              content: |2-
                function groupBy(arr, key) {
                  // Your code here
                }

                const data = [
                  { category: 'fruit', name: 'apple' },
                  { category: 'vegetable', name: 'carrot' },
                  { category: 'fruit', name: 'banana' }
                ];

                console.log(groupBy(data, 'category'));

            test_cases:
              hidden: false
              visible_cases:
                - input: ''
                  expected_output: '{"fruit":[{"category":"fruit","name":"apple"},{"category":"fruit","name":"banana"}],"vegetable":[{"category":"vegetable","name":"carrot"}]}'
              hidden: true
              hidden_cases:
                - input: ''
                  expected_output: '{"fruit":[...],"vegetable":[...]}'
            solution:
              content: |2-
                function groupBy(arr, key) {
                  return arr.reduce((acc, obj) => {
                    const groupKey = obj[key];
                    if (!acc[groupKey]) acc[groupKey] = [];
                    acc[groupKey].push(obj);
                    return acc;
                  }, {});
                }
